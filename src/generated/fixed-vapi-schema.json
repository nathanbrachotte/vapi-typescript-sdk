{
  "openapi": "3.0.0",
  "paths": {
    "/call": {
      "post": {
        "operationId": "CallController_create",
        "summary": "Create Call",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCallDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "CallController_findAll",
        "summary": "List Calls",
        "parameters": [
          {
            "name": "assistantId",
            "required": false,
            "in": "query",
            "description": "This will return calls with the specified assistantId.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Call"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/call/{id}": {
      "get": {
        "operationId": "CallController_findOne",
        "summary": "Get Call",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "CallController_update",
        "summary": "Update Call",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCallDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CallController_deleteCallData",
        "summary": "Delete Call Data",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "tags": [
          "Calls"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assistant": {
      "post": {
        "operationId": "AssistantController_create",
        "summary": "Create Assistant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "AssistantController_findAll",
        "summary": "List Assistants",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Assistant"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/assistant/{id}": {
      "get": {
        "operationId": "AssistantController_findOne",
        "summary": "Get Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "AssistantController_update",
        "summary": "Update Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssistantDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AssistantController_remove",
        "summary": "Delete Assistant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Assistant"
                }
              }
            }
          }
        },
        "tags": [
          "Assistants"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/phone-number": {
      "post": {
        "operationId": "PhoneNumberController_create",
        "summary": "Create Phone Number",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateByoPhoneNumberDTO",
                    "title": "ByoPhoneNumber"
                  },
                  {
                    "$ref": "#/components/schemas/CreateTwilioPhoneNumberDTO",
                    "title": "TwilioPhoneNumber"
                  },
                  {
                    "$ref": "#/components/schemas/CreateVonagePhoneNumberDTO",
                    "title": "VonagePhoneNumber"
                  },
                  {
                    "$ref": "#/components/schemas/CreateVapiPhoneNumberDTO",
                    "title": "VapiPhoneNumber"
                  }
                ],
                "discriminator": {
                  "propertyName": "provider",
                  "mapping": {
                    "byo-phone-number": "#/components/schemas/CreateByoPhoneNumberDTO",
                    "twilio": "#/components/schemas/CreateTwilioPhoneNumberDTO",
                    "vonage": "#/components/schemas/CreateVonagePhoneNumberDTO",
                    "vapi": "#/components/schemas/CreateVapiPhoneNumberDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ByoPhoneNumber",
                      "title": "ByoPhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/TwilioPhoneNumber",
                      "title": "TwilioPhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/VonagePhoneNumber",
                      "title": "VonagePhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/VapiPhoneNumber",
                      "title": "VapiPhoneNumber"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "provider",
                    "mapping": {
                      "byo-phone-number": "#/components/schemas/ByoPhoneNumber",
                      "twilio": "#/components/schemas/TwilioPhoneNumber",
                      "vonage": "#/components/schemas/VonagePhoneNumber",
                      "vapi": "#/components/schemas/VapiPhoneNumber"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "PhoneNumberController_findAll",
        "summary": "List Phone Numbers",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ByoPhoneNumber",
                        "title": "ByoPhoneNumber"
                      },
                      {
                        "$ref": "#/components/schemas/TwilioPhoneNumber",
                        "title": "TwilioPhoneNumber"
                      },
                      {
                        "$ref": "#/components/schemas/VonagePhoneNumber",
                        "title": "VonagePhoneNumber"
                      },
                      {
                        "$ref": "#/components/schemas/VapiPhoneNumber",
                        "title": "VapiPhoneNumber"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "provider",
                      "mapping": {
                        "byo-phone-number": "#/components/schemas/ByoPhoneNumber",
                        "twilio": "#/components/schemas/TwilioPhoneNumber",
                        "vonage": "#/components/schemas/VonagePhoneNumber",
                        "vapi": "#/components/schemas/VapiPhoneNumber"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/phone-number/{id}": {
      "get": {
        "operationId": "PhoneNumberController_findOne",
        "summary": "Get Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ByoPhoneNumber",
                      "title": "ByoPhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/TwilioPhoneNumber",
                      "title": "TwilioPhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/VonagePhoneNumber",
                      "title": "VonagePhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/VapiPhoneNumber",
                      "title": "VapiPhoneNumber"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "provider",
                    "mapping": {
                      "byo-phone-number": "#/components/schemas/ByoPhoneNumber",
                      "twilio": "#/components/schemas/TwilioPhoneNumber",
                      "vonage": "#/components/schemas/VonagePhoneNumber",
                      "vapi": "#/components/schemas/VapiPhoneNumber"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "PhoneNumberController_update",
        "summary": "Update Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneNumberDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ByoPhoneNumber",
                      "title": "ByoPhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/TwilioPhoneNumber",
                      "title": "TwilioPhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/VonagePhoneNumber",
                      "title": "VonagePhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/VapiPhoneNumber",
                      "title": "VapiPhoneNumber"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "provider",
                    "mapping": {
                      "byo-phone-number": "#/components/schemas/ByoPhoneNumber",
                      "twilio": "#/components/schemas/TwilioPhoneNumber",
                      "vonage": "#/components/schemas/VonagePhoneNumber",
                      "vapi": "#/components/schemas/VapiPhoneNumber"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "PhoneNumberController_remove",
        "summary": "Delete Phone Number",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ByoPhoneNumber",
                      "title": "ByoPhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/TwilioPhoneNumber",
                      "title": "TwilioPhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/VonagePhoneNumber",
                      "title": "VonagePhoneNumber"
                    },
                    {
                      "$ref": "#/components/schemas/VapiPhoneNumber",
                      "title": "VapiPhoneNumber"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "provider",
                    "mapping": {
                      "byo-phone-number": "#/components/schemas/ByoPhoneNumber",
                      "twilio": "#/components/schemas/TwilioPhoneNumber",
                      "vonage": "#/components/schemas/VonagePhoneNumber",
                      "vapi": "#/components/schemas/VapiPhoneNumber"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Phone Numbers"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/squad": {
      "post": {
        "operationId": "SquadController_create",
        "summary": "Create Squad",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Squad"
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "SquadController_findAll",
        "summary": "List Squads",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Squad"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/squad/{id}": {
      "get": {
        "operationId": "SquadController_findOne",
        "summary": "Get Squad",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Squad"
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "SquadController_update",
        "summary": "Update Squad",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSquadDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Squad"
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SquadController_remove",
        "summary": "Delete Squad",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Squad"
                }
              }
            }
          }
        },
        "tags": [
          "Squads"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/block": {
      "post": {
        "operationId": "BlockController_create",
        "summary": "Create Block",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateConversationBlockDTO",
                    "title": "ConversationBlock"
                  },
                  {
                    "$ref": "#/components/schemas/CreateToolCallBlockDTO",
                    "title": "ToolCallBlock"
                  },
                  {
                    "$ref": "#/components/schemas/CreateWorkflowBlockDTO",
                    "title": "WorkflowBlock"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "conversation": "#/components/schemas/CreateConversationBlockDTO",
                    "tool-call": "#/components/schemas/CreateToolCallBlockDTO",
                    "workflow": "#/components/schemas/CreateWorkflowBlockDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ConversationBlock",
                      "title": "ConversationBlock"
                    },
                    {
                      "$ref": "#/components/schemas/ToolCallBlock",
                      "title": "ToolCallBlock"
                    },
                    {
                      "$ref": "#/components/schemas/WorkflowBlock",
                      "title": "WorkflowBlock"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "conversation": "#/components/schemas/ConversationBlock",
                      "tool-call": "#/components/schemas/ToolCallBlock",
                      "workflow": "#/components/schemas/WorkflowBlock"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Blocks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "BlockController_findAll",
        "summary": "List Blocks",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/ConversationBlock",
                        "title": "ConversationBlock"
                      },
                      {
                        "$ref": "#/components/schemas/ToolCallBlock",
                        "title": "ToolCallBlock"
                      },
                      {
                        "$ref": "#/components/schemas/WorkflowBlock",
                        "title": "WorkflowBlock"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "conversation": "#/components/schemas/ConversationBlock",
                        "tool-call": "#/components/schemas/ToolCallBlock",
                        "workflow": "#/components/schemas/WorkflowBlock"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Blocks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/block/{id}": {
      "get": {
        "operationId": "BlockController_findOne",
        "summary": "Get Block",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ConversationBlock",
                      "title": "ConversationBlock"
                    },
                    {
                      "$ref": "#/components/schemas/ToolCallBlock",
                      "title": "ToolCallBlock"
                    },
                    {
                      "$ref": "#/components/schemas/WorkflowBlock",
                      "title": "WorkflowBlock"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "conversation": "#/components/schemas/ConversationBlock",
                      "tool-call": "#/components/schemas/ToolCallBlock",
                      "workflow": "#/components/schemas/WorkflowBlock"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Blocks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "BlockController_update",
        "summary": "Update Block",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBlockDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ConversationBlock",
                      "title": "ConversationBlock"
                    },
                    {
                      "$ref": "#/components/schemas/ToolCallBlock",
                      "title": "ToolCallBlock"
                    },
                    {
                      "$ref": "#/components/schemas/WorkflowBlock",
                      "title": "WorkflowBlock"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "conversation": "#/components/schemas/ConversationBlock",
                      "tool-call": "#/components/schemas/ToolCallBlock",
                      "workflow": "#/components/schemas/WorkflowBlock"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Blocks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "BlockController_remove",
        "summary": "Delete Block",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ConversationBlock",
                      "title": "ConversationBlock"
                    },
                    {
                      "$ref": "#/components/schemas/ToolCallBlock",
                      "title": "ToolCallBlock"
                    },
                    {
                      "$ref": "#/components/schemas/WorkflowBlock",
                      "title": "WorkflowBlock"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "conversation": "#/components/schemas/ConversationBlock",
                      "tool-call": "#/components/schemas/ToolCallBlock",
                      "workflow": "#/components/schemas/WorkflowBlock"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Blocks"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tool": {
      "post": {
        "operationId": "ToolController_create",
        "summary": "Create Tool",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/CreateDtmfToolDTO",
                    "title": "DtmfTool"
                  },
                  {
                    "$ref": "#/components/schemas/CreateEndCallToolDTO",
                    "title": "EndCallTool"
                  },
                  {
                    "$ref": "#/components/schemas/CreateFunctionToolDTO",
                    "title": "FunctionTool"
                  },
                  {
                    "$ref": "#/components/schemas/CreateGhlToolDTO",
                    "title": "GhlTool"
                  },
                  {
                    "$ref": "#/components/schemas/CreateMakeToolDTO",
                    "title": "MakeTool"
                  },
                  {
                    "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                    "title": "TransferCallTool"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "dtmf": "#/components/schemas/CreateDtmfToolDTO",
                    "endCall": "#/components/schemas/CreateEndCallToolDTO",
                    "function": "#/components/schemas/CreateFunctionToolDTO",
                    "ghl": "#/components/schemas/CreateGhlToolDTO",
                    "make": "#/components/schemas/CreateMakeToolDTO",
                    "transferCall": "#/components/schemas/CreateTransferCallToolDTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DtmfTool",
                      "title": "DtmfTool"
                    },
                    {
                      "$ref": "#/components/schemas/EndCallTool",
                      "title": "EndCallTool"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    },
                    {
                      "$ref": "#/components/schemas/GhlTool",
                      "title": "GhlTool"
                    },
                    {
                      "$ref": "#/components/schemas/MakeTool",
                      "title": "MakeTool"
                    },
                    {
                      "$ref": "#/components/schemas/TransferCallTool",
                      "title": "TransferCallTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "dtmf": "#/components/schemas/DtmfTool",
                      "endCall": "#/components/schemas/EndCallTool",
                      "function": "#/components/schemas/FunctionTool",
                      "ghl": "#/components/schemas/GhlTool",
                      "make": "#/components/schemas/MakeTool",
                      "transferCall": "#/components/schemas/TransferCallTool"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "ToolController_findAll",
        "summary": "List Tools",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "This is the maximum number of items to return. Defaults to 100.",
            "schema": {
              "minimum": 0,
              "maximum": 1000,
              "type": "number"
            }
          },
          {
            "name": "createdAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "createdAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the createdAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLt",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtGe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is greater than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "updatedAtLe",
            "required": false,
            "in": "query",
            "description": "This will return items where the updatedAt is less than or equal to the specified value.",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DtmfTool",
                        "title": "DtmfTool"
                      },
                      {
                        "$ref": "#/components/schemas/EndCallTool",
                        "title": "EndCallTool"
                      },
                      {
                        "$ref": "#/components/schemas/FunctionTool",
                        "title": "FunctionTool"
                      },
                      {
                        "$ref": "#/components/schemas/GhlTool",
                        "title": "GhlTool"
                      },
                      {
                        "$ref": "#/components/schemas/MakeTool",
                        "title": "MakeTool"
                      },
                      {
                        "$ref": "#/components/schemas/TransferCallTool",
                        "title": "TransferCallTool"
                      }
                    ],
                    "discriminator": {
                      "propertyName": "type",
                      "mapping": {
                        "dtmf": "#/components/schemas/DtmfTool",
                        "endCall": "#/components/schemas/EndCallTool",
                        "function": "#/components/schemas/FunctionTool",
                        "ghl": "#/components/schemas/GhlTool",
                        "make": "#/components/schemas/MakeTool",
                        "transferCall": "#/components/schemas/TransferCallTool"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/tool/{id}": {
      "get": {
        "operationId": "ToolController_findOne",
        "summary": "Get Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DtmfTool",
                      "title": "DtmfTool"
                    },
                    {
                      "$ref": "#/components/schemas/EndCallTool",
                      "title": "EndCallTool"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    },
                    {
                      "$ref": "#/components/schemas/GhlTool",
                      "title": "GhlTool"
                    },
                    {
                      "$ref": "#/components/schemas/MakeTool",
                      "title": "MakeTool"
                    },
                    {
                      "$ref": "#/components/schemas/TransferCallTool",
                      "title": "TransferCallTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "dtmf": "#/components/schemas/DtmfTool",
                      "endCall": "#/components/schemas/EndCallTool",
                      "function": "#/components/schemas/FunctionTool",
                      "ghl": "#/components/schemas/GhlTool",
                      "make": "#/components/schemas/MakeTool",
                      "transferCall": "#/components/schemas/TransferCallTool"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "ToolController_update",
        "summary": "Update Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateToolDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DtmfTool",
                      "title": "DtmfTool"
                    },
                    {
                      "$ref": "#/components/schemas/EndCallTool",
                      "title": "EndCallTool"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    },
                    {
                      "$ref": "#/components/schemas/GhlTool",
                      "title": "GhlTool"
                    },
                    {
                      "$ref": "#/components/schemas/MakeTool",
                      "title": "MakeTool"
                    },
                    {
                      "$ref": "#/components/schemas/TransferCallTool",
                      "title": "TransferCallTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "dtmf": "#/components/schemas/DtmfTool",
                      "endCall": "#/components/schemas/EndCallTool",
                      "function": "#/components/schemas/FunctionTool",
                      "ghl": "#/components/schemas/GhlTool",
                      "make": "#/components/schemas/MakeTool",
                      "transferCall": "#/components/schemas/TransferCallTool"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ToolController_remove",
        "summary": "Delete Tool",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DtmfTool",
                      "title": "DtmfTool"
                    },
                    {
                      "$ref": "#/components/schemas/EndCallTool",
                      "title": "EndCallTool"
                    },
                    {
                      "$ref": "#/components/schemas/FunctionTool",
                      "title": "FunctionTool"
                    },
                    {
                      "$ref": "#/components/schemas/GhlTool",
                      "title": "GhlTool"
                    },
                    {
                      "$ref": "#/components/schemas/MakeTool",
                      "title": "MakeTool"
                    },
                    {
                      "$ref": "#/components/schemas/TransferCallTool",
                      "title": "TransferCallTool"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "dtmf": "#/components/schemas/DtmfTool",
                      "endCall": "#/components/schemas/EndCallTool",
                      "function": "#/components/schemas/FunctionTool",
                      "ghl": "#/components/schemas/GhlTool",
                      "make": "#/components/schemas/MakeTool",
                      "transferCall": "#/components/schemas/TransferCallTool"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Tools"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/file": {
      "post": {
        "operationId": "FileController_create",
        "summary": "Upload File",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file"
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "get": {
        "operationId": "FileController_findAll",
        "summary": "List Files",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/file/{id}": {
      "get": {
        "operationId": "FileController_findOne",
        "summary": "Get File",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "patch": {
        "operationId": "FileController_update",
        "summary": "Update File",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFileDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "FileController_remove",
        "summary": "Delete File",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          }
        },
        "tags": [
          "Files"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/analytics": {
      "post": {
        "operationId": "AnalyticsController_query",
        "summary": "Create Analytics Queries",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnalyticsQueryDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnalyticsQueryResult"
                  }
                }
              }
            }
          },
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Analytics"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Vapi API",
    "description": "API for building voice assistants",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://api.vapi.ai"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "Bearer",
        "type": "http",
        "description": "Retrieve your API Key from [Dashboard](dashboard.vapi.ai)."
      }
    },
    "schemas": {
      "DeepgramTranscriber": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the transcription provider that will be used.",
            "enum": [
              "deepgram"
            ]
          },
          "model": {
            "description": "This is the Deepgram model that will be used. A list of models can be found here: https://developers.deepgram.com/docs/models-languages-overview",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "nova-2",
                  "nova-2-general",
                  "nova-2-meeting",
                  "nova-2-phonecall",
                  "nova-2-finance",
                  "nova-2-conversationalai",
                  "nova-2-voicemail",
                  "nova-2-video",
                  "nova-2-medical",
                  "nova-2-drivethru",
                  "nova-2-automotive",
                  "nova",
                  "nova-general",
                  "nova-phonecall",
                  "nova-medical",
                  "enhanced",
                  "enhanced-general",
                  "enhanced-meeting",
                  "enhanced-phonecall",
                  "enhanced-finance",
                  "base",
                  "base-general",
                  "base-meeting",
                  "base-phonecall",
                  "base-finance",
                  "base-conversationalai",
                  "base-voicemail",
                  "base-video"
                ]
              },
              {
                "type": "string"
              }
            ]
          },
          "language": {
            "type": "string",
            "description": "This is the language that will be set for the transcription. The list of languages Deepgram supports can be found here: https://developers.deepgram.com/docs/models-languages-overview",
            "enum": [
              "bg",
              "ca",
              "cs",
              "da",
              "da-DK",
              "de",
              "de-CH",
              "el",
              "en",
              "en-AU",
              "en-GB",
              "en-IN",
              "en-NZ",
              "en-US",
              "es",
              "es-419",
              "es-LATAM",
              "et",
              "fi",
              "fr",
              "fr-CA",
              "hi",
              "hi-Latn",
              "hu",
              "id",
              "it",
              "ja",
              "ko",
              "ko-KR",
              "lt",
              "lv",
              "ms",
              "multi",
              "nl",
              "nl-BE",
              "no",
              "pl",
              "pt",
              "pt-BR",
              "ro",
              "ru",
              "sk",
              "sv",
              "sv-SE",
              "ta",
              "taq",
              "th",
              "th-TH",
              "tr",
              "uk",
              "vi",
              "zh",
              "zh-CN",
              "zh-Hans",
              "zh-Hant",
              "zh-TW"
            ]
          },
          "smartFormat": {
            "type": "boolean",
            "description": "This will be use smart format option provided by Deepgram. It's default disabled because it can sometimes format numbers as times but it's getting better.",
            "example": false
          },
          "keywords": {
            "description": "These keywords are passed to the transcription model to help it pick up use-case specific words. Anything that may not be a common word, like your company name, should be added here.",
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "/^\\p{L}[\\p{L}\\d]*(?::[+-]?\\d+)?$/u"
            }
          },
          "endpointing": {
            "type": "number",
            "description": "This is the timeout after which Deepgram will send transcription on user silence. You can read in-depth documentation here: https://developers.deepgram.com/docs/endpointing.\n\nHere are the most important bits:\n- Defaults to 10. This is recommended for most use cases to optimize for latency.\n- 10 can cause some missing transcriptions since because of the shorter context. This mostly happens for one-word utterances. For those uses cases, it's recommended to try 300. It will add a bit of latency but the quality and reliability of the experience will be better.\n- If neither 10 nor 300 work, contact support@vapi.ai and we'll find another solution.\n\n@default 10",
            "minimum": 10,
            "maximum": 500
          }
        },
        "required": [
          "provider"
        ]
      },
      "TalkscriberTranscriber": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the transcription provider that will be used.",
            "enum": [
              "talkscriber"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the model that will be used for the transcription.",
            "enum": [
              "whisper"
            ]
          },
          "language": {
            "type": "string",
            "description": "This is the language that will be set for the transcription. The list of languages Whisper supports can be found here: https://github.com/openai/whisper/blob/main/whisper/tokenizer.py",
            "enum": [
              "en",
              "zh",
              "de",
              "es",
              "ru",
              "ko",
              "fr",
              "ja",
              "pt",
              "tr",
              "pl",
              "ca",
              "nl",
              "ar",
              "sv",
              "it",
              "id",
              "hi",
              "fi",
              "vi",
              "he",
              "uk",
              "el",
              "ms",
              "cs",
              "ro",
              "da",
              "hu",
              "ta",
              "no",
              "th",
              "ur",
              "hr",
              "bg",
              "lt",
              "la",
              "mi",
              "ml",
              "cy",
              "sk",
              "te",
              "fa",
              "lv",
              "bn",
              "sr",
              "az",
              "sl",
              "kn",
              "et",
              "mk",
              "br",
              "eu",
              "is",
              "hy",
              "ne",
              "mn",
              "bs",
              "kk",
              "sq",
              "sw",
              "gl",
              "mr",
              "pa",
              "si",
              "km",
              "sn",
              "yo",
              "so",
              "af",
              "oc",
              "ka",
              "be",
              "tg",
              "sd",
              "gu",
              "am",
              "yi",
              "lo",
              "uz",
              "fo",
              "ht",
              "ps",
              "tk",
              "nn",
              "mt",
              "sa",
              "lb",
              "my",
              "bo",
              "tl",
              "mg",
              "as",
              "tt",
              "haw",
              "ln",
              "ha",
              "ba",
              "jw",
              "su",
              "yue"
            ]
          }
        },
        "required": [
          "provider"
        ]
      },
      "GladiaTranscriber": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the transcription provider that will be used.",
            "enum": [
              "gladia"
            ]
          },
          "model": {
            "description": "This is the Gladia model that will be used. Default is 'fast'",
            "oneOf": [
              {
                "enum": [
                  "fast",
                  "accurate"
                ],
                "type": "string"
              }
            ]
          },
          "languageBehaviour": {
            "description": "Defines how the transcription model detects the audio language. Default value is 'automatic single language'.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "manual",
                  "automatic single language",
                  "automatic multiple languages"
                ]
              }
            ]
          },
          "language": {
            "type": "string",
            "description": "Defines the language to use for the transcription. Required when languageBehaviour is 'manual'.",
            "enum": [
              "af",
              "sq",
              "am",
              "ar",
              "hy",
              "as",
              "az",
              "ba",
              "eu",
              "be",
              "bn",
              "bs",
              "br",
              "bg",
              "ca",
              "zh",
              "hr",
              "cs",
              "da",
              "nl",
              "en",
              "et",
              "fo",
              "fi",
              "fr",
              "gl",
              "ka",
              "de",
              "el",
              "gu",
              "ht",
              "ha",
              "haw",
              "he",
              "hi",
              "hu",
              "is",
              "id",
              "it",
              "ja",
              "jp",
              "jv",
              "kn",
              "kk",
              "km",
              "ko",
              "lo",
              "la",
              "lv",
              "ln",
              "lt",
              "lb",
              "mk",
              "mg",
              "ms",
              "ml",
              "mt",
              "mi",
              "mr",
              "mn",
              "mymr",
              "ne",
              "no",
              "nn",
              "oc",
              "ps",
              "fa",
              "pl",
              "pt",
              "pa",
              "ro",
              "ru",
              "sa",
              "sr",
              "sn",
              "sd",
              "si",
              "sk",
              "sl",
              "so",
              "es",
              "su",
              "sw",
              "sv",
              "tl",
              "tg",
              "ta",
              "tt",
              "te",
              "th",
              "bo",
              "tr",
              "tk",
              "uk",
              "ur",
              "uz",
              "vi",
              "cy",
              "yi",
              "yo"
            ]
          },
          "transcriptionHint": {
            "type": "string",
            "description": "Provides a custom vocabulary to the model to improve accuracy of transcribing context specific words, technical terms, names, etc. If empty, this argument is ignored.\n⚠️ Warning ⚠️: Please be aware that the transcription_hint field has a character limit of 600. If you provide a transcription_hint longer than 600 characters, it will be automatically truncated to meet this limit.",
            "maxLength": 600,
            "example": "custom vocabulary"
          },
          "prosody": {
            "type": "boolean",
            "description": "If prosody is true, you will get a transcription that can contain prosodies i.e. (laugh) (giggles) (malefic laugh) (toss) (music)… Default value is false.",
            "example": false
          },
          "audioEnhancer": {
            "type": "boolean",
            "description": "If true, audio will be pre-processed to improve accuracy but latency will increase. Default value is false.",
            "example": false
          }
        },
        "required": [
          "provider"
        ]
      },
      "Condition": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "This is the value you want to compare against the parameter.",
            "pattern": "ALLOWED_REGEX"
          },
          "operator": {
            "type": "string",
            "description": "This is the operator you want to use to compare the parameter and value.",
            "enum": [
              "eq",
              "neq",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "pattern": "ALLOWED_REGEX"
          },
          "param": {
            "type": "string",
            "description": "This is the name of the parameter that you want to check.",
            "pattern": "ALLOWED_REGEX"
          }
        },
        "required": [
          "value",
          "operator",
          "param"
        ]
      },
      "ToolMessageStart": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "request-start"
            ],
            "description": "This message is triggered when the tool call starts.\n\nThis message is never triggered for async tools.\n\nIf this message is not provided, one of the default filler messages \"Hold on a sec\", \"One moment\", \"Just a sec\", \"Give me a moment\" or \"This'll just take a sec\" will be used."
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered."
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "ToolMessageComplete": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call is complete.\n\nThis message is triggered immediately without waiting for your server to respond for async tool calls.\n\nIf this message is not provided, the model will be requested to respond.\n\nIf this message is provided, only this message will be spoken and the model will not be requested to come up with a response. It's an exclusive OR.",
            "enum": [
              "request-complete"
            ]
          },
          "role": {
            "type": "string",
            "description": "This is optional and defaults to \"assistant\".\n\nWhen role=assistant, `content` is said out loud.\n\nWhen role=system, `content` is passed to the model in a system message. Example:\n    system: default one\n    assistant:\n    user:\n    assistant:\n    user:\n    assistant:\n    user:\n    assistant: tool called\n    tool: your server response\n    <--- system prompt as hint\n    ---> model generates response which is spoken\nThis is useful when you want to provide a hint to the model about what to say next.",
            "enum": [
              "assistant",
              "system"
            ]
          },
          "endCallAfterSpokenEnabled": {
            "type": "boolean",
            "description": "This is an optional boolean that if true, the call will end after the message is spoken. Default is false.\n\nThis is ignored if `role` is set to `system`.\n\n@default false",
            "example": false
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered."
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "ToolMessageFailed": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call fails.\n\nThis message is never triggered for async tool calls.\n\nIf this message is not provided, the model will be requested to respond.\n\nIf this message is provided, only this message will be spoken and the model will not be requested to come up with a response. It's an exclusive OR.",
            "enum": [
              "request-failed"
            ]
          },
          "endCallAfterSpokenEnabled": {
            "type": "boolean",
            "description": "This is an optional boolean that if true, the call will end after the message is spoken. Default is false.\n\n@default false",
            "example": false
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered."
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "ToolMessageDelayed": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This message is triggered when the tool call is delayed.\n\nThere are the two things that can trigger this message:\n1. The user talks with the assistant while your server is processing the request. Default is \"Sorry, a few more seconds.\"\n2. The server doesn't respond within `timingMilliseconds`.\n\nThis message is never triggered for async tool calls.",
            "enum": [
              "request-response-delayed"
            ]
          },
          "timingMilliseconds": {
            "type": "number",
            "minimum": 100,
            "maximum": 20000,
            "example": 1000,
            "description": "The number of milliseconds to wait for the server response before saying this message."
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant says when this message is triggered."
          },
          "conditions": {
            "description": "This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Condition"
            }
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "JsonSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of output you'd like.\n\n`string`, `number`, `integer`, `boolean` are the primitive types and should be obvious.\n\n`array` and `object` are more interesting and quite powerful. They allow you to define nested structures.\n\nFor `array`, you can define the schema of the items in the array using the `items` property.\n\nFor `object`, you can define the properties of the object using the `properties` property.",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "array",
              "object"
            ]
          },
          "items": {
            "type": "object",
            "description": "This is required if the type is \"array\". This is the schema of the items in the array.\n\nThis is of type JsonSchema. However, Swagger doesn't support circular references."
          },
          "properties": {
            "type": "object",
            "description": "This is required if the type is \"object\". This specifies the properties of the object.\n\nThis is a map of string to JsonSchema. However, Swagger doesn't support circular references."
          },
          "description": {
            "type": "string",
            "description": "This is the description to help the model understand what it needs to output."
          },
          "required": {
            "description": "This is a list of properties that are required.\n\nThis only makes sense if the type is \"object\".",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenAIFunctionParameters": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.",
            "enum": [
              "object"
            ]
          },
          "properties": {
            "type": "object",
            "description": "This provides a description of the properties required by the function.\nJSON Schema can be used to specify expectations for each property.\nRefer to [this doc](https://ajv.js.org/json-schema.html#json-data-type) for a comprehensive guide on JSON Schema.",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonSchema"
            }
          },
          "required": {
            "description": "This specifies the properties that are required by the function.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "type",
          "properties"
        ]
      },
      "OpenAIFunction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the the name of the function to be called.\n\nMust be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "maxLength": 64,
            "pattern": "/^[a-zA-Z0-9_-]{1,64}$/"
          },
          "description": {
            "type": "string",
            "maxLength": 1000
          },
          "parameters": {
            "description": "These are the parameters the functions accepts, described as a JSON Schema object.\n\nSee the [OpenAI guide](https://platform.openai.com/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema) for documentation about the format.\n\nOmitting parameters defines a function with an empty parameter list.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunctionParameters"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "Server": {
        "type": "object",
        "properties": {
          "timeoutSeconds": {
            "type": "number",
            "description": "This is the timeout in seconds for the request to your server. Defaults to 20 seconds.\n\n@default 20",
            "minimum": 1,
            "maximum": 20,
            "example": 20
          },
          "url": {
            "type": "string",
            "description": "API endpoint to send requests to."
          },
          "secret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as server."
          }
        },
        "required": [
          "url"
        ]
      },
      "CreateDtmfToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "dtmf"
            ],
            "description": "The type of tool. \"dtmf\" for DTMF tool."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "CreateEndCallToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "endCall"
            ],
            "description": "The type of tool. \"endCall\" for End Call tool."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "CreateVoicemailToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "voicemail"
            ],
            "description": "The type of tool. \"voicemail\". This uses the model itself to determine if a voicemil was reached. Can be used alternatively/alongside with TwilioVoicemailDetection"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "CreateFunctionToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "GhlToolMetadata": {
        "type": "object",
        "properties": {
          "workflowId": {
            "type": "string"
          },
          "locationId": {
            "type": "string"
          }
        }
      },
      "CreateGhlToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ghl"
            ],
            "description": "The type of tool. \"ghl\" for GHL tool."
          },
          "metadata": {
            "$ref": "#/components/schemas/GhlToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "MakeToolMetadata": {
        "type": "object",
        "properties": {
          "scenarioId": {
            "type": "number"
          },
          "triggerHookId": {
            "type": "number"
          }
        }
      },
      "CreateMakeToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "make"
            ],
            "description": "The type of tool. \"make\" for Make tool."
          },
          "metadata": {
            "$ref": "#/components/schemas/MakeToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "TransferDestinationAssistant": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "assistant"
            ]
          },
          "transferMode": {
            "type": "string",
            "description": "This is the mode to use for the transfer. Default is `rolling-history`.\n\n- `rolling-history`: This is the default mode. It keeps the entire conversation history and appends the new assistant's system message on transfer.\n\n  Example:\n\n  Pre-transfer:\n    system: assistant1 system message\n    assistant: assistant1 first message\n    user: hey, good morning\n    assistant: how can i help?\n    user: i need help with my account\n    assistant: (destination.message)\n\n  Post-transfer:\n    system: assistant1 system message\n    assistant: assistant1 first message\n    user: hey, good morning\n    assistant: how can i help?\n    user: i need help with my account\n    assistant: (destination.message)\n    system: assistant2 system message\n    assistant: assistant2 first message (or model generated if firstMessageMode is set to `assistant-speaks-first-with-model-generated-message`)\n\n- `swap-system-message-in-history`: This replaces the original system message with the new assistant's system message on transfer.\n\n  Example:\n\n  Pre-transfer:\n    system: assistant1 system message\n    assistant: assistant1 first message\n    user: hey, good morning\n    assistant: how can i help?\n    user: i need help with my account\n    assistant: (destination.message)\n\n  Post-transfer:\n    system: assistant2 system message\n    assistant: assistant1 first message\n    user: hey, good morning\n    assistant: how can i help?\n    user: i need help with my account\n    assistant: (destination.message)\n    assistant: assistant2 first message (or model generated if firstMessageMode is set to `assistant-speaks-first-with-model-generated-message`)",
            "enum": [
              "rolling-history",
              "swap-system-message-in-history"
            ]
          },
          "assistantName": {
            "type": "string",
            "description": "This is the assistant to transfer the call to."
          },
          "message": {
            "type": "string",
            "description": "This is the message to say before transferring the call to the destination.\n\nIf this is not provided and transfer tool messages is not provided, default is \"Transferring the call now\".\n\nIf set to \"\", nothing is spoken. This is useful when you want to silently transfer. This is especially useful when transferring between assistants in a squad. In this scenario, you likely also want to set `assistant.firstMessageMode=assistant-speaks-first-with-model-generated-message` for the destination assistant."
          },
          "description": {
            "type": "string",
            "description": "This is the description of the destination, used by the AI to choose when and how to transfer the call."
          }
        },
        "required": [
          "type",
          "assistantName"
        ]
      },
      "TransferDestinationStep": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "step"
            ]
          },
          "stepName": {
            "type": "string",
            "description": "This is the step to transfer to."
          },
          "message": {
            "type": "string",
            "description": "This is the message to say before transferring the call to the destination.\n\nIf this is not provided and transfer tool messages is not provided, default is \"Transferring the call now\".\n\nIf set to \"\", nothing is spoken. This is useful when you want to silently transfer. This is especially useful when transferring between assistants in a squad. In this scenario, you likely also want to set `assistant.firstMessageMode=assistant-speaks-first-with-model-generated-message` for the destination assistant."
          },
          "description": {
            "type": "string",
            "description": "This is the description of the destination, used by the AI to choose when and how to transfer the call."
          }
        },
        "required": [
          "type",
          "stepName"
        ]
      },
      "TransferDestinationNumber": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "number"
            ]
          },
          "numberE164CheckEnabled": {
            "type": "boolean",
            "description": "This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.\n\nUse cases:\n- `false`: To allow non-E164 numbers like `+001234567890`, `1234', or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks.\n- `true` (default): To allow only E164 numbers like `+14155551234`. This is for most standard PSTN calls.\n\nIf `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\\+?[a-zA-Z0-9]+$/`).\n\n@default true (E164 check is enabled)",
            "default": true
          },
          "number": {
            "type": "string",
            "description": "This is the phone number to transfer the call to.",
            "minLength": 3,
            "maxLength": 40
          },
          "extension": {
            "type": "string",
            "description": "This is the extension to dial after transferring the call to the `number`.",
            "minLength": 1,
            "maxLength": 10
          },
          "message": {
            "type": "string",
            "description": "This is the message to say before transferring the call to the destination.\n\nIf this is not provided and transfer tool messages is not provided, default is \"Transferring the call now\".\n\nIf set to \"\", nothing is spoken. This is useful when you want to silently transfer. This is especially useful when transferring between assistants in a squad. In this scenario, you likely also want to set `assistant.firstMessageMode=assistant-speaks-first-with-model-generated-message` for the destination assistant."
          },
          "description": {
            "type": "string",
            "description": "This is the description of the destination, used by the AI to choose when and how to transfer the call."
          }
        },
        "required": [
          "type",
          "number"
        ]
      },
      "TransferDestinationSip": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "sip"
            ]
          },
          "sipUri": {
            "type": "string",
            "description": "This is the SIP URI to transfer the call to."
          },
          "message": {
            "type": "string",
            "description": "This is the message to say before transferring the call to the destination.\n\nIf this is not provided and transfer tool messages is not provided, default is \"Transferring the call now\".\n\nIf set to \"\", nothing is spoken. This is useful when you want to silently transfer. This is especially useful when transferring between assistants in a squad. In this scenario, you likely also want to set `assistant.firstMessageMode=assistant-speaks-first-with-model-generated-message` for the destination assistant."
          },
          "description": {
            "type": "string",
            "description": "This is the description of the destination, used by the AI to choose when and how to transfer the call."
          }
        },
        "required": [
          "type",
          "sipUri"
        ]
      },
      "CreateTransferCallToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "transferCall"
            ]
          },
          "destinations": {
            "type": "array",
            "description": "These are the destinations that the call can be transferred to. If no destinations are provided, server.url will be used to get the transfer destination once the tool is called.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TransferDestinationAssistant",
                  "title": "Assistant"
                },
                {
                  "$ref": "#/components/schemas/TransferDestinationStep",
                  "title": "Step"
                },
                {
                  "$ref": "#/components/schemas/TransferDestinationNumber",
                  "title": "Number"
                },
                {
                  "$ref": "#/components/schemas/TransferDestinationSip",
                  "title": "Sip"
                }
              ]
            }
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "OpenAIMessage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "enum": [
              "assistant",
              "function",
              "user",
              "system",
              "tool"
            ]
          }
        },
        "required": [
          "content",
          "role"
        ]
      },
      "KnowledgeBase": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "canonical"
            ]
          },
          "topK": {
            "type": "number",
            "minimum": 1,
            "maximum": 10
          },
          "fileIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "provider",
          "fileIds"
        ]
      },
      "AnyscaleModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "anyscale"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "AnthropicModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "model": {
            "type": "string",
            "description": "This is the Anthropic/Claude models that will be used.",
            "enum": [
              "claude-3-opus-20240229",
              "claude-3-sonnet-20240229",
              "claude-3-haiku-20240307",
              "claude-3-5-sonnet-20240620"
            ]
          },
          "provider": {
            "type": "string",
            "enum": [
              "anthropic"
            ]
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "model",
          "provider"
        ]
      },
      "CustomLLMModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "description": "This is the provider that will be used for the model. Any service, including your own server, that is compatible with the OpenAI API can be used.",
            "enum": [
              "custom-llm"
            ]
          },
          "metadataSendMode": {
            "type": "string",
            "description": "This determines whether metadata is sent in requests to the custom provider.\n\n- `off` will not send any metadata. payload will look like `{ messages }`\n- `variable` will send `assistant.metadata` as a variable on the payload. payload will look like `{ messages, metadata }`\n- `destructured` will send `assistant.metadata` fields directly on the payload. payload will look like `{ messages, ...metadata }`\n\nFurther, `variable` and `destructured` will send `call`, `phoneNumber`, and `customer` objects in the payload.\n\nDefault is `variable`.",
            "enum": [
              "off",
              "variable",
              "destructured"
            ]
          },
          "url": {
            "type": "string",
            "description": "These is the URL we'll use for the OpenAI client's `baseURL`. Ex. https://openrouter.ai/api/v1"
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "provider",
          "url",
          "model"
        ]
      },
      "DeepInfraModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "deepinfra"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "GroqModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b",
            "enum": [
              "llama-3.1-405b-reasoning",
              "llama-3.1-70b-versatile",
              "llama-3.1-8b-instant",
              "mixtral-8x7b-32768",
              "llama3-8b-8192",
              "llama3-70b-8192",
              "llama3-groq-8b-8192-tool-use-preview",
              "llama3-groq-70b-8192-tool-use-preview",
              "gemma-7b-it",
              "gemma2-9b-it"
            ]
          },
          "provider": {
            "type": "string",
            "enum": [
              "groq"
            ]
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "model",
          "provider"
        ]
      },
      "OpenAIModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "description": "This is the provider that will be used for the model.",
            "enum": [
              "openai"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the OpenAI model that will be used.",
            "enum": [
              "gpt-4o-mini",
              "gpt-4o-mini-2024-07-18",
              "gpt-4o",
              "gpt-4o-2024-05-13",
              "gpt-4o-2024-08-06",
              "gpt-4-turbo",
              "gpt-4-turbo-2024-04-09",
              "gpt-4-turbo-preview",
              "gpt-4-0125-preview",
              "gpt-4-1106-preview",
              "gpt-4",
              "gpt-4-0613",
              "gpt-3.5-turbo",
              "gpt-3.5-turbo-0125",
              "gpt-3.5-turbo-1106",
              "gpt-3.5-turbo-16k",
              "gpt-3.5-turbo-0613"
            ]
          },
          "fallbackModels": {
            "type": "string",
            "description": "These are the fallback models that will be used if the primary model fails. This shouldn't be specified unless you have a specific reason to do so. Vapi will automatically find the fastest fallbacks that make sense.",
            "enum": [
              "gpt-4o-mini",
              "gpt-4o-mini-2024-07-18",
              "gpt-4o",
              "gpt-4o-2024-05-13",
              "gpt-4o-2024-08-06",
              "gpt-4-turbo",
              "gpt-4-turbo-2024-04-09",
              "gpt-4-turbo-preview",
              "gpt-4-0125-preview",
              "gpt-4-1106-preview",
              "gpt-4",
              "gpt-4-0613",
              "gpt-3.5-turbo",
              "gpt-3.5-turbo-0125",
              "gpt-3.5-turbo-1106",
              "gpt-3.5-turbo-16k",
              "gpt-3.5-turbo-0613"
            ],
            "example": [
              "gpt-4-0125-preview",
              "gpt-4-0613"
            ],
            "items": {
              "type": "string",
              "enum": [
                "gpt-4o-mini",
                "gpt-4o-mini-2024-07-18",
                "gpt-4o",
                "gpt-4o-2024-05-13",
                "gpt-4o-2024-08-06",
                "gpt-4-turbo",
                "gpt-4-turbo-2024-04-09",
                "gpt-4-turbo-preview",
                "gpt-4-0125-preview",
                "gpt-4-1106-preview",
                "gpt-4",
                "gpt-4-0613",
                "gpt-3.5-turbo",
                "gpt-3.5-turbo-0125",
                "gpt-3.5-turbo-1106",
                "gpt-3.5-turbo-16k",
                "gpt-3.5-turbo-0613"
              ]
            }
          },
          "semanticCachingEnabled": {
            "type": "boolean",
            "example": true
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "OpenRouterModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "openrouter"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "PerplexityAIModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "perplexity-ai"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "TogetherAIModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "together-ai"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "VapiModel": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "This is the starting state for the conversation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "tools": {
            "type": "array",
            "description": "These are the tools that the assistant can use during the call. To use existing tools, use `toolIds`.\n\nBoth `tools` and `toolIds` can be used together.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CreateDtmfToolDTO",
                  "title": "DtmfTool"
                },
                {
                  "$ref": "#/components/schemas/CreateEndCallToolDTO",
                  "title": "EndCallTool"
                },
                {
                  "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                  "title": "VoicemailTool"
                },
                {
                  "$ref": "#/components/schemas/CreateFunctionToolDTO",
                  "title": "FunctionTool"
                },
                {
                  "$ref": "#/components/schemas/CreateGhlToolDTO",
                  "title": "GhlTool"
                },
                {
                  "$ref": "#/components/schemas/CreateMakeToolDTO",
                  "title": "MakeTool"
                },
                {
                  "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                  "title": "TransferTool"
                }
              ]
            }
          },
          "toolIds": {
            "description": "These are the tools that the assistant can use during the call. To use transient tools, use `tools`.\n\nBoth `tools` and `toolIds` can be used together.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "steps": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HandoffStep",
                  "title": "HandoffStep"
                },
                {
                  "$ref": "#/components/schemas/CallbackStep",
                  "title": "CallbackStep"
                }
              ]
            }
          },
          "provider": {
            "type": "string",
            "enum": [
              "vapi"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the name of the model. Ex. cognitivecomputations/dolphin-mixtral-8x7b"
          },
          "temperature": {
            "type": "number",
            "description": "This is the temperature that will be used for calls. Default is 0 to leverage caching for lower latency.",
            "minimum": 0,
            "maximum": 2
          },
          "knowledgeBase": {
            "description": "These are the options for the knowledge base.",
            "allOf": [
              {
                "$ref": "#/components/schemas/KnowledgeBase"
              }
            ]
          },
          "maxTokens": {
            "type": "number",
            "description": "This is the max number of tokens that the assistant will be allowed to generate in each turn of the conversation. Default is 250.",
            "minimum": 50,
            "maximum": 1000
          },
          "emotionRecognitionEnabled": {
            "type": "boolean",
            "description": "This determines whether we detect user's emotion while they speak and send it as an additional info to model.\n\nDefault `false` because the model is usually are good at understanding the user's emotion from text.\n\n@default false"
          },
          "numFastTurns": {
            "type": "number",
            "description": "This sets how many turns at the start of the conversation to use a smaller, faster model from the same provider before switching to the primary model. Example, gpt-3.5-turbo if provider is openai.\n\nDefault is 0.\n\n@default 0",
            "minimum": 0
          }
        },
        "required": [
          "provider",
          "model"
        ]
      },
      "AzureVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "azure"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "andrew",
                  "brian",
                  "emma"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "Azure Voice ID"
              }
            ]
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.5,
            "maximum": 2
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "CartesiaVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "cartesia"
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the model that will be used. This is optional and will default to the correct model for the voiceId.",
            "enum": [
              "sonic-english",
              "sonic-multilingual"
            ],
            "example": "sonic-english"
          },
          "language": {
            "type": "string",
            "description": "This is the language that will be used. This is optional and will default to the correct language for the voiceId.",
            "enum": [
              "de",
              "en",
              "es",
              "fr",
              "ja",
              "pt",
              "zh"
            ],
            "example": "en"
          },
          "voiceId": {
            "type": "string",
            "description": "This is the provider-specific ID that will be used."
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "DeepgramVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "deepgram"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "asteria",
                  "luna",
                  "stella",
                  "athena",
                  "hera",
                  "orion",
                  "arcas",
                  "perseus",
                  "angus",
                  "orpheus",
                  "helios",
                  "zeus"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "Deepgram Voice ID"
              }
            ]
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "ElevenLabsVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "11labs"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used. Ensure the Voice is present in your 11Labs Voice Library.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "burt",
                  "marissa",
                  "andrea",
                  "sarah",
                  "phillip",
                  "steve",
                  "joseph",
                  "myra",
                  "paula",
                  "ryan",
                  "drew",
                  "paul",
                  "mrb",
                  "matilda",
                  "mark"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "11Labs Voice ID"
              }
            ]
          },
          "stability": {
            "type": "number",
            "description": "Defines the stability for voice settings.",
            "minimum": 0,
            "maximum": 1,
            "example": 0.5
          },
          "similarityBoost": {
            "type": "number",
            "description": "Defines the similarity boost for voice settings.",
            "minimum": 0,
            "maximum": 1,
            "example": 0.75
          },
          "style": {
            "type": "number",
            "description": "Defines the style for voice settings.",
            "minimum": 0,
            "maximum": 1,
            "example": 0
          },
          "useSpeakerBoost": {
            "type": "boolean",
            "description": "Defines the use speaker boost for voice settings.",
            "example": false
          },
          "optimizeStreamingLatency": {
            "type": "number",
            "description": "Defines the optimize streaming latency for voice settings. Defaults to 3.",
            "minimum": 0,
            "maximum": 4,
            "example": 3
          },
          "enableSsmlParsing": {
            "type": "boolean",
            "description": "Defines the use of https://elevenlabs.io/docs/speech-synthesis/prompting#pronunciation. Disabled by default.",
            "example": false
          },
          "model": {
            "type": "string",
            "description": "This is the model that will be used. Defaults to 'eleven_turbo_v2' if not specified.",
            "enum": [
              "eleven_multilingual_v2",
              "eleven_turbo_v2",
              "eleven_turbo_v2_5",
              "eleven_monolingual_v1"
            ],
            "example": "eleven_turbo_v2_5"
          },
          "phoneNumberDigitPauseSeconds": {
            "type": "number",
            "description": "This is the duration to pause between digits when the assistant is speaking a phone number, in seconds.\n\nThis uses `<break time=\"${phoneNumberDigitPauseSeconds}s\" />` tag from ElevenLabs.\n\nDefaults to 0s because the model sometimes hallucinates when using the tag.",
            "minimum": 0,
            "maximum": 2,
            "example": 0
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "LMNTVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "lmnt"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "lily",
                  "daniel"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "LMNT Voice ID"
              }
            ]
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.25,
            "maximum": 2,
            "example": null
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "NeetsVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "neets"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "vits",
                  "vits"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "Neets Voice ID"
              }
            ]
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "OpenAIVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "openai"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "enum": [
              "alloy",
              "echo",
              "fable",
              "onyx",
              "nova",
              "shimmer"
            ],
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "alloy",
                  "echo",
                  "fable",
                  "onyx",
                  "nova",
                  "shimmer"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "OpenAI Voice ID"
              }
            ],
            "type": "string"
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.25,
            "maximum": 4,
            "example": null
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "PlayHTVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "playht"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "jennifer",
                  "melissa",
                  "will",
                  "chris",
                  "matt",
                  "jack",
                  "ruby",
                  "davis",
                  "donna",
                  "michael"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "PlayHT Voice ID"
              }
            ]
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.1,
            "maximum": 5,
            "example": null
          },
          "temperature": {
            "type": "number",
            "description": "A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice.",
            "minimum": 0.1,
            "maximum": 2,
            "example": null
          },
          "emotion": {
            "type": "string",
            "description": "An emotion to be applied to the speech.",
            "enum": [
              "female_happy",
              "female_sad",
              "female_angry",
              "female_fearful",
              "female_disgust",
              "female_surprised",
              "male_happy",
              "male_sad",
              "male_angry",
              "male_fearful",
              "male_disgust",
              "male_surprised"
            ],
            "example": null
          },
          "voiceGuidance": {
            "type": "number",
            "description": "A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices.",
            "minimum": 1,
            "maximum": 6,
            "example": null
          },
          "styleGuidance": {
            "type": "number",
            "description": "A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance.",
            "minimum": 1,
            "maximum": 30,
            "example": null
          },
          "textGuidance": {
            "type": "number",
            "description": "A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text.",
            "minimum": 1,
            "maximum": 2,
            "example": null
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "RimeAIVoice": {
        "type": "object",
        "properties": {
          "inputPreprocessingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model output is preprocessed into chunks before being sent to the voice provider.\n\nDefault `true` because voice generation sounds better with chunking (and reformatting them).\n\nTo send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.\n\nIf disabled, vapi-provided audio control tokens like <flush /> will not work.",
            "example": true
          },
          "inputReformattingEnabled": {
            "type": "boolean",
            "description": "This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.\n\nDefault `true` because voice generation sounds better with reformatting.\n\nTo disable chunk reformatting, set this to `false`.\n\nTo disable chunking completely, set `inputPreprocessingEnabled` to `false`.",
            "example": true
          },
          "inputMinCharacters": {
            "type": "number",
            "description": "This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.\n\nIncreasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.\n\nDecreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.",
            "minimum": 1,
            "maximum": 80,
            "example": 30
          },
          "inputPunctuationBoundaries": {
            "type": "string",
            "description": "These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.\n\nConstraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].",
            "enum": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              ")",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "example": [
              "。",
              "，",
              ".",
              "!",
              "?",
              ";",
              "،",
              "۔",
              "।",
              "॥",
              "|",
              "||",
              ",",
              ":"
            ],
            "items": {
              "type": "string",
              "enum": [
                "。",
                "，",
                ".",
                "!",
                "?",
                ";",
                ")",
                "،",
                "۔",
                "।",
                "॥",
                "|",
                "||",
                ",",
                ":"
              ]
            }
          },
          "fillerInjectionEnabled": {
            "type": "boolean",
            "description": "This determines whether fillers are injected into the model output before inputting it into the voice provider.\n\nDefault `false` because you can achieve better results with prompting the model.",
            "example": false
          },
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "rime-ai"
            ]
          },
          "voiceId": {
            "description": "This is the provider-specific ID that will be used.",
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "marsh",
                  "bayou",
                  "creek",
                  "brook",
                  "flower",
                  "spore",
                  "glacier",
                  "gulch",
                  "alpine",
                  "cove",
                  "lagoon",
                  "tundra",
                  "steppe",
                  "mesa",
                  "grove",
                  "rainforest",
                  "moraine",
                  "wildflower",
                  "peak",
                  "boulder",
                  "abbie",
                  "allison",
                  "ally",
                  "alona",
                  "amber",
                  "ana",
                  "antoine",
                  "armon",
                  "brenda",
                  "brittany",
                  "carol",
                  "colin",
                  "courtney",
                  "elena",
                  "elliot",
                  "eva",
                  "geoff",
                  "gerald",
                  "hank",
                  "helen",
                  "hera",
                  "jen",
                  "joe",
                  "joy",
                  "juan",
                  "kendra",
                  "kendrick",
                  "kenneth",
                  "kevin",
                  "kris",
                  "linda",
                  "madison",
                  "marge",
                  "marina",
                  "marissa",
                  "marta",
                  "maya",
                  "nicholas",
                  "nyles",
                  "phil",
                  "reba",
                  "rex",
                  "rick",
                  "ritu",
                  "rob",
                  "rodney",
                  "rohan",
                  "rosco",
                  "samantha",
                  "sandy",
                  "selena",
                  "seth",
                  "sharon",
                  "stan",
                  "tamra",
                  "tanya",
                  "tibur",
                  "tj",
                  "tyler",
                  "viv",
                  "yadira"
                ],
                "title": "Preset Voice Options"
              },
              {
                "type": "string",
                "title": "RimeAI Voice ID"
              }
            ]
          },
          "model": {
            "type": "string",
            "description": "This is the model that will be used. Defaults to 'v1' when not specified.",
            "enum": [
              "v1",
              "mist"
            ],
            "example": "v1"
          },
          "speed": {
            "type": "number",
            "description": "This is the speed multiplier that will be used.",
            "minimum": 0.1,
            "example": null
          }
        },
        "required": [
          "provider",
          "voiceId"
        ]
      },
      "TransportConfigurationTwilio": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "twilio"
            ]
          },
          "timeout": {
            "type": "number",
            "description": "The integer number of seconds that we should allow the phone to ring before assuming there is no answer.\nThe default is `60` seconds and the maximum is `600` seconds.\nFor some call flows, we will add a 5-second buffer to the timeout value you provide.\nFor this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds.\nYou can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.\n\n@default 60",
            "minimum": 1,
            "maximum": 600,
            "example": 60
          },
          "record": {
            "type": "boolean",
            "description": "Whether to record the call.\nCan be `true` to record the phone call, or `false` to not.\nThe default is `false`.\n\n@default false",
            "example": false
          },
          "recordingChannels": {
            "type": "string",
            "description": "The number of channels in the final recording.\nCan be: `mono` or `dual`.\nThe default is `mono`.\n`mono` records both legs of the call in a single channel of the recording file.\n`dual` records each leg to a separate channel of the recording file.\nThe first channel of a dual-channel recording contains the parent call and the second channel contains the child call.\n\n@default 'mono'",
            "enum": [
              "mono",
              "dual"
            ],
            "example": "mono"
          }
        },
        "required": [
          "provider"
        ]
      },
      "TwilioVoicemailDetection": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the provider to use for voicemail detection.",
            "enum": [
              "twilio"
            ]
          },
          "voicemailDetectionTypes": {
            "type": "string",
            "description": "These are the AMD messages from Twilio that are considered as voicemail. Default is ['machine_end_beep', 'machine_end_silence'].\n\n@default {Array} ['machine_end_beep', 'machine_end_silence']",
            "enum": [
              "machine_start",
              "human",
              "fax",
              "unknown",
              "machine_end_beep",
              "machine_end_silence",
              "machine_end_other"
            ],
            "example": [
              "machine_end_beep",
              "machine_end_silence"
            ],
            "items": {
              "type": "string",
              "enum": [
                "machine_start",
                "human",
                "fax",
                "unknown",
                "machine_end_beep",
                "machine_end_silence",
                "machine_end_other"
              ]
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "This sets whether the assistant should detect voicemail. Defaults to true.\n\n@default true"
          },
          "machineDetectionTimeout": {
            "type": "number",
            "description": "The number of seconds that Twilio should attempt to perform answering machine detection before timing out and returning AnsweredBy as unknown. Default is 30 seconds.\n\nIncreasing this value will provide the engine more time to make a determination. This can be useful when DetectMessageEnd is provided in the MachineDetection parameter and there is an expectation of long answering machine greetings that can exceed 30 seconds.\n\nDecreasing this value will reduce the amount of time the engine has to make a determination. This can be particularly useful when the Enable option is provided in the MachineDetection parameter and you want to limit the time for initial detection.\n\nCheck the [Twilio docs](https://www.twilio.com/docs/voice/answering-machine-detection#optional-api-tuning-parameters) for more info.\n\n@default 30",
            "minimum": 3,
            "maximum": 59
          },
          "machineDetectionSpeechThreshold": {
            "type": "number",
            "description": "The number of milliseconds that is used as the measuring stick for the length of the speech activity. Durations lower than this value will be interpreted as a human, longer as a machine. Default is 2400 milliseconds.\n\nIncreasing this value will reduce the chance of a False Machine (detected machine, actually human) for a long human greeting (e.g., a business greeting) but increase the time it takes to detect a machine.\n\nDecreasing this value will reduce the chances of a False Human (detected human, actually machine) for short voicemail greetings. The value of this parameter may need to be reduced by more than 1000ms to detect very short voicemail greetings. A reduction of that significance can result in increased False Machine detections. Adjusting the MachineDetectionSpeechEndThreshold is likely the better approach for short voicemails. Decreasing MachineDetectionSpeechThreshold will also reduce the time it takes to detect a machine.\n\nCheck the [Twilio docs](https://www.twilio.com/docs/voice/answering-machine-detection#optional-api-tuning-parameters) for more info.\n\n@default 2400",
            "minimum": 1000,
            "maximum": 6000
          },
          "machineDetectionSpeechEndThreshold": {
            "type": "number",
            "description": "The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Default is 1200 milliseconds.\n\nIncreasing this value will typically be used to better address the short voicemail greeting scenarios. For short voicemails, there is typically 1000-2000ms of audio followed by 1200-2400ms of silence and then additional audio before the beep. Increasing the MachineDetectionSpeechEndThreshold to ~2500ms will treat the 1200-2400ms of silence as a gap in the greeting but not the end of the greeting and will result in a machine detection. The downsides of such a change include:\n- Increasing the delay for human detection by the amount you increase this parameter, e.g., a change of 1200ms to 2500ms increases human detection delay by 1300ms.\n- Cases where a human has two utterances separated by a period of silence (e.g. a \"Hello\", then 2000ms of silence, and another \"Hello\") may be interpreted as a machine.\n\nDecreasing this value will result in faster human detection. The consequence is that it can lead to increased False Human (detected human, actually machine) detections because a silence gap in a voicemail greeting (not necessarily just in short voicemail scenarios) can be incorrectly interpreted as the end of speech.\n\nCheck the [Twilio docs](https://www.twilio.com/docs/voice/answering-machine-detection#optional-api-tuning-parameters) for more info.\n\n@default 1200",
            "minimum": 500,
            "maximum": 5000
          },
          "machineDetectionSilenceTimeout": {
            "type": "number",
            "description": "The number of milliseconds of initial silence after which an unknown AnsweredBy result will be returned. Default is 5000 milliseconds.\n\nIncreasing this value will result in waiting for a longer period of initial silence before returning an 'unknown' AMD result.\n\nDecreasing this value will result in waiting for a shorter period of initial silence before returning an 'unknown' AMD result.\n\nCheck the [Twilio docs](https://www.twilio.com/docs/voice/answering-machine-detection#optional-api-tuning-parameters) for more info.\n\n@default 5000",
            "minimum": 2000,
            "maximum": 10000
          }
        },
        "required": [
          "provider"
        ]
      },
      "AnalysisPlan": {
        "type": "object",
        "properties": {
          "summaryPrompt": {
            "type": "string",
            "maxLength": 2000,
            "description": "This is the prompt that's used to summarize the call. The output is stored in `call.analysis.summary`.\n\nDefault is \"You are an expert note-taker. You will be given a transcript of a call. Summarize the call in 2-3 sentences. DO NOT return anything except the summary.\".\n\nSet to '' or 'off' to disable."
          },
          "summaryRequestTimeoutSeconds": {
            "type": "number",
            "minimum": 1,
            "maximum": 20,
            "description": "This is how long the request is tried before giving up. When request times out, `call.analysis.summary` will be empty. Increasing this timeout will delay the end of call report.\n\nDefault is 5 seconds."
          },
          "structuredDataRequestTimeoutSeconds": {
            "type": "number",
            "minimum": 1,
            "maximum": 20,
            "description": "This is how long the request is tried before giving up. When request times out, `call.analysis.structuredData` will be empty. Increasing this timeout will delay the end of call report.\n\nDefault is 5 seconds."
          },
          "successEvaluationPrompt": {
            "type": "string",
            "maxLength": 2000,
            "description": "This is the prompt that's used to evaluate if the call was successful. The output is stored in `call.analysis.successEvaluation`.\n\nDefault is \"You are an expert call evaluator. You will be given a transcript of a call and the system prompt of the AI participant. Determine if the call was successful based on the objectives inferred from the system prompt. DO NOT return anything except the result.\".\n\nSet to '' or 'off' to disable.\n\nYou can use this standalone or in combination with `successEvaluationRubric`. If both are provided, they are concatenated into appropriate instructions."
          },
          "successEvaluationRubric": {
            "type": "string",
            "enum": [
              "NumericScale",
              "DescriptiveScale",
              "Checklist",
              "Matrix",
              "PercentageScale",
              "LikertScale",
              "AutomaticRubric",
              "PassFail"
            ],
            "description": "This enforces the rubric of the evaluation. The output is stored in `call.analysis.successEvaluation`.\n\nOptions include:\n- 'NumericScale': A scale of 1 to 10.\n- 'DescriptiveScale': A scale of Excellent, Good, Fair, Poor.\n- 'Checklist': A checklist of criteria and their status.\n- 'Matrix': A grid that evaluates multiple criteria across different performance levels.\n- 'PercentageScale': A scale of 0% to 100%.\n- 'LikertScale': A scale of Strongly Agree, Agree, Neutral, Disagree, Strongly Disagree.\n- 'AutomaticRubric': Automatically break down evaluation into several criteria, each with its own score.\n- 'PassFail': A simple 'true' if call passed, 'false' if not.\n\nFor 'Checklist' and 'Matrix', provide the criteria in `successEvaluationPrompt`.\n\nDefault is 'PassFail' if `successEvaluationPrompt` is not provided, and null if `successEvaluationPrompt` is provided.\n\nYou can use this standalone or in combination with `successEvaluationPrompt`. If both are provided, they are concatenated into appropriate instructions."
          },
          "successEvaluationRequestTimeoutSeconds": {
            "type": "number",
            "minimum": 1,
            "maximum": 20,
            "description": "This is how long the request is tried before giving up. When request times out, `call.analysis.successEvaluation` will be empty. Increasing this timeout will delay the end of call report.\n\nDefault is 5 seconds."
          },
          "structuredDataPrompt": {
            "type": "string",
            "description": "This is the prompt that's used to extract structured data from the call. The output is stored in `call.analysis.structuredData`.\n\nDisabled by default.\n\nYou can use this standalone or in combination with `structuredDataSchema`. If both are provided, they are concatenated into appropriate instructions.",
            "maxLength": 2000
          },
          "structuredDataSchema": {
            "description": "This enforces the schema of the structured data. This output is stored in `call.analysis.structuredData`.\n\nComplete guide on JSON Schema can be found [here](https://ajv.js.org/json-schema.html#json-data-type).\n\nDisabled by default.\n\nYou can use this standalone or in combination with `structuredDataPrompt`. If both are provided, they are concatenated into appropriate instructions.",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          }
        }
      },
      "ArtifactPlan": {
        "type": "object",
        "properties": {
          "videoRecordingEnabled": {
            "type": "boolean",
            "description": "This determines whether the video is recorded during the call. Default is false. Only relevant for `webCall` type."
          },
          "recordingS3PathPrefix": {
            "type": "string",
            "description": "This is the S3 path prefix for the audio recording. This is only used if you have provided S3 credentials. Check the Providers page in the Dashboard.\n\nIf credential.s3PathPrefix is set, this will append to it.\n\nExample: `/my-prefix`. Default is `/`."
          }
        }
      },
      "MessagePlan": {
        "type": "object",
        "properties": {
          "idleMessages": {
            "description": "This are the messages that the assistant will speak when the user hasn't responded for `idleTimeoutSeconds`. Each time the timeout is triggered, a random message will be chosen from this array.\n\n@default null (no idle message is spoken)",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 1000
            }
          },
          "idleMessageMaxSpokenCount": {
            "type": "number",
            "description": "This determines the maximum number of times `idleMessages` can be spoken during the call.\n\n@default 3",
            "minimum": 1,
            "maximum": 10
          },
          "idleTimeoutSeconds": {
            "type": "number",
            "description": "This is the timeout in seconds before a message from `idleMessages` is spoken. The clock starts when the assistant finishes speaking and remains active until the user speaks.\n\n@default 10",
            "minimum": 5,
            "maximum": 30
          }
        }
      },
      "MinWaitBeforeModelRequestConfiguration": {
        "type": "object",
        "properties": {
          "onTranscriptionWithPunctuationSeconds": {
            "type": "number",
            "description": "The minimum number of seconds to wait after transcription ending with punctuation before sending a request to the model. Defaults to 0.1.\n\nThis setting exists because the transcriber punctuates the transcription when it's more confident that customer has completed a thought.\n\n@default 0.1",
            "minimum": 0,
            "maximum": 3,
            "example": 0.1
          },
          "onTranscriptionWithoutPunctuationSeconds": {
            "type": "number",
            "description": "The minimum number of seconds to wait after transcription ending without punctuation before sending a request to the model. Defaults to 1.5.\n\nThis setting exists to catch the cases where the transcriber was not confident enough to punctuate the transcription, but the customer is done and has been silent for a long time.\n\n@default 1.5",
            "minimum": 0,
            "maximum": 3,
            "example": 1.5
          },
          "onTranscriptionWithNumberSeconds": {
            "type": "number",
            "description": "The minimum number of seconds to wait after transcription ending with a number before sending a request to the model. Defaults to 0.4.\n\nThis setting exists because the transcriber will sometimes punctuate the transcription ending with a number, even though the customer hasn't uttered the full number. This happens commonly for long numbers when the customer reads the number in chunks.\n\n@default 0.5",
            "minimum": 0,
            "maximum": 3,
            "example": 0.5
          }
        }
      },
      "PipelineConfiguration": {
        "type": "object",
        "properties": {
          "minWaitBeforeSpeakingSeconds": {
            "type": "number",
            "description": "The minimum number of seconds after customer speech before the assistant starts speaking. Defaults to 0.4.\n\nThis setting helps avoid the assistant jumping in accidentally when the customer is still speaking but pauses for a moment. If customer is expected to take long pauses, set this to a higher value.\n\n@default 0.4",
            "minimum": 0,
            "maximum": 5,
            "example": 0.4
          },
          "numWordsToInterruptAssistant": {
            "type": "number",
            "description": "The number of words to wait for before interrupting the assistant.\n\nWords like \"stop\", \"actually\", \"no\", etc. will always interrupt immediately regardless of this value.\n\nWords like \"okay\", \"yeah\", \"right\" will never interrupt.\n\nWhen set to 0, it will rely solely on the VAD (Voice Activity Detector) and will not wait for any transcription. Defaults to this (0).\n\n@default 0",
            "minimum": 0,
            "maximum": 10,
            "example": 0
          },
          "smartTurnDetectionEnabled": {
            "type": "boolean",
            "description": "This determines if the VAP model is to be used to detect endpoints and backchannels.\n\nDefault `false` since experimental.\n@default false",
            "example": false
          },
          "minWaitBeforeModelRequestConfiguration": {
            "description": "The minimum number of seconds after transcription before sending a request to the model.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MinWaitBeforeModelRequestConfiguration"
              }
            ]
          }
        },
        "required": [
          "minWaitBeforeModelRequestConfiguration"
        ]
      },
      "CreateAssistantDTO": {
        "type": "object",
        "properties": {
          "transcriber": {
            "description": "These are the options for the assistant's transcriber.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeepgramTranscriber",
                "title": "DeepgramTranscriber"
              },
              {
                "$ref": "#/components/schemas/GladiaTranscriber",
                "title": "GladiaTranscriber"
              },
              {
                "$ref": "#/components/schemas/TalkscriberTranscriber",
                "title": "TalkscriberTranscriber"
              }
            ]
          },
          "model": {
            "description": "These are the options for the assistant's LLM.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyscaleModel",
                "title": "AnyscaleModel"
              },
              {
                "$ref": "#/components/schemas/AnthropicModel",
                "title": "AnthropicModel"
              },
              {
                "$ref": "#/components/schemas/CustomLLMModel",
                "title": "CustomLLMModel"
              },
              {
                "$ref": "#/components/schemas/DeepInfraModel",
                "title": "DeepInfraModel"
              },
              {
                "$ref": "#/components/schemas/GroqModel",
                "title": "GroqModel"
              },
              {
                "$ref": "#/components/schemas/OpenAIModel",
                "title": "OpenAIModel"
              },
              {
                "$ref": "#/components/schemas/OpenRouterModel",
                "title": "OpenRouterModel"
              },
              {
                "$ref": "#/components/schemas/PerplexityAIModel",
                "title": "PerplexityAIModel"
              },
              {
                "$ref": "#/components/schemas/TogetherAIModel",
                "title": "TogetherAIModel"
              },
              {
                "$ref": "#/components/schemas/VapiModel",
                "title": "VapiModel"
              }
            ]
          },
          "voice": {
            "description": "These are the options for the assistant's voice.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureVoice",
                "title": "AzureVoice"
              },
              {
                "$ref": "#/components/schemas/CartesiaVoice",
                "title": "CartesiaVoice"
              },
              {
                "$ref": "#/components/schemas/DeepgramVoice",
                "title": "DeepgramVoice"
              },
              {
                "$ref": "#/components/schemas/ElevenLabsVoice",
                "title": "ElevenLabsVoice"
              },
              {
                "$ref": "#/components/schemas/LMNTVoice",
                "title": "LMNTVoice"
              },
              {
                "$ref": "#/components/schemas/NeetsVoice",
                "title": "NeetsVoice"
              },
              {
                "$ref": "#/components/schemas/OpenAIVoice",
                "title": "OpenAIVoice"
              },
              {
                "$ref": "#/components/schemas/PlayHTVoice",
                "title": "PlayHTVoice"
              },
              {
                "$ref": "#/components/schemas/RimeAIVoice",
                "title": "RimeAIVoice"
              }
            ],
            "default": {
              "provider": "playht",
              "voiceId": "jennifer"
            }
          },
          "firstMessageMode": {
            "type": "string",
            "description": "This is the mode for the first message. Default is 'assistant-speaks-first'.\n\nUse:\n- 'assistant-speaks-first' to have the assistant speak first.\n- 'assistant-waits-for-user' to have the assistant wait for the user to speak first.\n- 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).\n\n@default 'assistant-speaks-first'",
            "enum": [
              "assistant-speaks-first",
              "assistant-speaks-first-with-model-generated-message",
              "assistant-waits-for-user"
            ],
            "example": "assistant-speaks-first"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true.",
            "example": true
          },
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.",
            "example": false
          },
          "clientMessages": {
            "type": "string",
            "enum": [
              "conversation-update",
              "function-call",
              "function-call-result",
              "hang",
              "metadata",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "tool-calls-result",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "function-call",
              "hang",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "user-interrupted",
              "voice-input"
            ],
            "description": "These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "function-call",
                "function-call-result",
                "hang",
                "metadata",
                "model-output",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "tool-calls-result",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "serverMessages": {
            "type": "string",
            "enum": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "model-output",
              "phone-call-control",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "transfer-destination-request",
              "transfer-update",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "speech-update",
              "status-update",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted"
            ],
            "description": "These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "end-of-call-report",
                "function-call",
                "hang",
                "model-output",
                "phone-call-control",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "transfer-destination-request",
                "transfer-update",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "silenceTimeoutSeconds": {
            "type": "number",
            "description": "How many seconds of silence to wait before ending the call. Defaults to 30.\n\n@default 30",
            "minimum": 10,
            "maximum": 600,
            "example": 30
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.\n\n@default 1800 (~30 minutes)",
            "minimum": 10,
            "maximum": 3600,
            "example": 1800
          },
          "backgroundSound": {
            "type": "string",
            "description": "This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.",
            "enum": [
              "off",
              "office"
            ],
            "example": "office"
          },
          "backchannelingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "backgroundDenoisingEnabled": {
            "type": "boolean",
            "description": "This enables filtering of noise and background speech while the user is talking.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "modelOutputInMessagesEnabled": {
            "type": "boolean",
            "description": "This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "transportConfigurations": {
            "type": "array",
            "description": "These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TransportConfigurationTwilio",
                  "title": "Twilio"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant.\n\nThis is required when you want to transfer between assistants in a call.",
            "maxLength": 40
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).\n\nIf unspecified, assistant will wait for user to speak and use the model to respond once they speak.",
            "maxLength": 1000
          },
          "voicemailDetection": {
            "description": "These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].\nThis uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.\nYou can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioVoicemailDetection"
              }
            ]
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 1000
          },
          "endCallMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if it ends the call.\n\nIf unspecified, it will hang up without saying anything.",
            "maxLength": 1000
          },
          "endCallPhrases": {
            "description": "This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 140,
              "minLength": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "This is for metadata you want to store on the assistant."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl"
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "analysisPlan": {
            "description": "This is the plan for analysis of assistant's calls. Stored in `call.analysis`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisPlan"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.\n\nNote: `recordingEnabled` is currently at the root level. It will be moved to `artifactPlan` in the future, but will remain backwards compatible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          },
          "messagePlan": {
            "description": "This is the plan for static messages that can be spoken by the assistant during the call, like `idleMessages`.\n\nNote: `firstMessage`, `voicemailMessage`, and `endCallMessage` are currently at the root level. They will be moved to `messagePlan` in the future, but will remain backwards compatible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessagePlan"
              }
            ]
          },
          "pipelineConfiguration": {
            "description": "This is the pipeline configuration for assistant's calls.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineConfiguration"
              }
            ]
          },
          "credentialIds": {
            "description": "These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AssistantOverrides": {
        "type": "object",
        "properties": {
          "transcriber": {
            "description": "These are the options for the assistant's transcriber.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeepgramTranscriber",
                "title": "DeepgramTranscriber"
              },
              {
                "$ref": "#/components/schemas/GladiaTranscriber",
                "title": "GladiaTranscriber"
              },
              {
                "$ref": "#/components/schemas/TalkscriberTranscriber",
                "title": "TalkscriberTranscriber"
              }
            ]
          },
          "model": {
            "description": "These are the options for the assistant's LLM.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyscaleModel",
                "title": "AnyscaleModel"
              },
              {
                "$ref": "#/components/schemas/AnthropicModel",
                "title": "AnthropicModel"
              },
              {
                "$ref": "#/components/schemas/CustomLLMModel",
                "title": "CustomLLMModel"
              },
              {
                "$ref": "#/components/schemas/DeepInfraModel",
                "title": "DeepInfraModel"
              },
              {
                "$ref": "#/components/schemas/GroqModel",
                "title": "GroqModel"
              },
              {
                "$ref": "#/components/schemas/OpenAIModel",
                "title": "OpenAIModel"
              },
              {
                "$ref": "#/components/schemas/OpenRouterModel",
                "title": "OpenRouterModel"
              },
              {
                "$ref": "#/components/schemas/PerplexityAIModel",
                "title": "PerplexityAIModel"
              },
              {
                "$ref": "#/components/schemas/TogetherAIModel",
                "title": "TogetherAIModel"
              },
              {
                "$ref": "#/components/schemas/VapiModel",
                "title": "VapiModel"
              }
            ]
          },
          "voice": {
            "description": "These are the options for the assistant's voice.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureVoice",
                "title": "AzureVoice"
              },
              {
                "$ref": "#/components/schemas/CartesiaVoice",
                "title": "CartesiaVoice"
              },
              {
                "$ref": "#/components/schemas/DeepgramVoice",
                "title": "DeepgramVoice"
              },
              {
                "$ref": "#/components/schemas/ElevenLabsVoice",
                "title": "ElevenLabsVoice"
              },
              {
                "$ref": "#/components/schemas/LMNTVoice",
                "title": "LMNTVoice"
              },
              {
                "$ref": "#/components/schemas/NeetsVoice",
                "title": "NeetsVoice"
              },
              {
                "$ref": "#/components/schemas/OpenAIVoice",
                "title": "OpenAIVoice"
              },
              {
                "$ref": "#/components/schemas/PlayHTVoice",
                "title": "PlayHTVoice"
              },
              {
                "$ref": "#/components/schemas/RimeAIVoice",
                "title": "RimeAIVoice"
              }
            ],
            "default": {
              "provider": "playht",
              "voiceId": "jennifer"
            }
          },
          "firstMessageMode": {
            "type": "string",
            "description": "This is the mode for the first message. Default is 'assistant-speaks-first'.\n\nUse:\n- 'assistant-speaks-first' to have the assistant speak first.\n- 'assistant-waits-for-user' to have the assistant wait for the user to speak first.\n- 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).\n\n@default 'assistant-speaks-first'",
            "enum": [
              "assistant-speaks-first",
              "assistant-speaks-first-with-model-generated-message",
              "assistant-waits-for-user"
            ],
            "example": "assistant-speaks-first"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true.",
            "example": true
          },
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.",
            "example": false
          },
          "clientMessages": {
            "type": "string",
            "enum": [
              "conversation-update",
              "function-call",
              "function-call-result",
              "hang",
              "metadata",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "tool-calls-result",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "function-call",
              "hang",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "user-interrupted",
              "voice-input"
            ],
            "description": "These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "function-call",
                "function-call-result",
                "hang",
                "metadata",
                "model-output",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "tool-calls-result",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "serverMessages": {
            "type": "string",
            "enum": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "model-output",
              "phone-call-control",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "transfer-destination-request",
              "transfer-update",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "speech-update",
              "status-update",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted"
            ],
            "description": "These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "end-of-call-report",
                "function-call",
                "hang",
                "model-output",
                "phone-call-control",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "transfer-destination-request",
                "transfer-update",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "silenceTimeoutSeconds": {
            "type": "number",
            "description": "How many seconds of silence to wait before ending the call. Defaults to 30.\n\n@default 30",
            "minimum": 10,
            "maximum": 600,
            "example": 30
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.\n\n@default 1800 (~30 minutes)",
            "minimum": 10,
            "maximum": 3600,
            "example": 1800
          },
          "backgroundSound": {
            "type": "string",
            "description": "This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.",
            "enum": [
              "off",
              "office"
            ],
            "example": "office"
          },
          "backchannelingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "backgroundDenoisingEnabled": {
            "type": "boolean",
            "description": "This enables filtering of noise and background speech while the user is talking.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "modelOutputInMessagesEnabled": {
            "type": "boolean",
            "description": "This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "transportConfigurations": {
            "type": "array",
            "description": "These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TransportConfigurationTwilio",
                  "title": "Twilio"
                }
              ]
            }
          },
          "variableValues": {
            "type": "object",
            "description": "These are values that will be used to replace the template variables in the assistant messages and other text-based fields."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant.\n\nThis is required when you want to transfer between assistants in a call.",
            "maxLength": 40
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).\n\nIf unspecified, assistant will wait for user to speak and use the model to respond once they speak.",
            "maxLength": 1000
          },
          "voicemailDetection": {
            "description": "These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].\nThis uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.\nYou can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioVoicemailDetection"
              }
            ]
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 1000
          },
          "endCallMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if it ends the call.\n\nIf unspecified, it will hang up without saying anything.",
            "maxLength": 1000
          },
          "endCallPhrases": {
            "description": "This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 140,
              "minLength": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "This is for metadata you want to store on the assistant."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl"
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "analysisPlan": {
            "description": "This is the plan for analysis of assistant's calls. Stored in `call.analysis`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisPlan"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.\n\nNote: `recordingEnabled` is currently at the root level. It will be moved to `artifactPlan` in the future, but will remain backwards compatible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          },
          "messagePlan": {
            "description": "This is the plan for static messages that can be spoken by the assistant during the call, like `idleMessages`.\n\nNote: `firstMessage`, `voicemailMessage`, and `endCallMessage` are currently at the root level. They will be moved to `messagePlan` in the future, but will remain backwards compatible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessagePlan"
              }
            ]
          },
          "pipelineConfiguration": {
            "description": "This is the pipeline configuration for assistant's calls.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineConfiguration"
              }
            ]
          },
          "credentialIds": {
            "description": "These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SquadMemberDTO": {
        "type": "object",
        "properties": {
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "This can be used to override the assistant's settings and provide values for it's template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "assistantDestinations": {
            "description": "These are the others assistants that this assistant can transfer to.\n\nIf the assistant already has transfer call tool, these destinations are just appended to existing ones.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransferDestinationAssistant"
            }
          }
        }
      },
      "CreateSquadDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the squad."
          },
          "members": {
            "description": "This is the list of assistants that make up the squad.\n\nThe call will start with the first assistant in the list.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SquadMemberDTO"
            }
          },
          "membersOverrides": {
            "description": "This can be used to override all the assistants' settings and provide values for their template variables.\n\nBoth `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          }
        },
        "required": [
          "members"
        ]
      },
      "ImportTwilioPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "twilioPhoneNumber": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Twilio.",
            "deprecated": true
          },
          "twilioAccountSid": {
            "type": "string",
            "description": "This is your Twilio Account SID that will be used to handle this phone number."
          },
          "twilioAuthToken": {
            "type": "string",
            "description": "This is the Twilio Auth Token that will be used to handle this phone number."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "twilioPhoneNumber",
          "twilioAccountSid",
          "twilioAuthToken"
        ]
      },
      "CreateCustomerDTO": {
        "type": "object",
        "properties": {
          "numberE164CheckEnabled": {
            "type": "boolean",
            "description": "This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.\n\nUse cases:\n- `false`: To allow non-E164 numbers like `+001234567890`, `1234', or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks.\n- `true` (default): To allow only E164 numbers like `+14155551234`. This is for most standard PSTN calls.\n\nIf `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\\+?[a-zA-Z0-9]+$/`).\n\n@default true (E164 check is enabled)",
            "default": true
          },
          "extension": {
            "type": "string",
            "description": "This is the extension that will be dialed after the call is answered.",
            "maxLength": 10,
            "example": null
          },
          "number": {
            "type": "string",
            "description": "This is the number of the customer.",
            "minLength": 3,
            "maxLength": 40
          },
          "sipUri": {
            "type": "string",
            "description": "This is the SIP URI of the customer."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the customer. This is just for your own reference.",
            "maxLength": 40
          }
        }
      },
      "CreateCallDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the call. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          },
          "phoneNumberId": {
            "type": "string",
            "description": "This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "phoneNumber": {
            "description": "This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO"
              }
            ]
          },
          "customerId": {
            "type": "string",
            "description": "This is the customer that will be called. To call a transient customer , use `customer` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "customer": {
            "description": "This is the customer that will be called. To call an existing customer, use `customerId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateCustomerDTO"
              }
            ]
          }
        }
      },
      "AnalysisCostBreakdown": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "number",
            "description": "This is the cost to summarize the call."
          },
          "summaryPromptTokens": {
            "type": "number",
            "description": "This is the number of prompt tokens used to summarize the call."
          },
          "summaryCompletionTokens": {
            "type": "number",
            "description": "This is the number of completion tokens used to summarize the call."
          },
          "structuredData": {
            "type": "number",
            "description": "This is the cost to extract structured data from the call."
          },
          "structuredDataPromptTokens": {
            "type": "number",
            "description": "This is the number of prompt tokens used to extract structured data from the call."
          },
          "structuredDataCompletionTokens": {
            "type": "number",
            "description": "This is the number of completion tokens used to extract structured data from the call."
          },
          "successEvaluation": {
            "type": "number",
            "description": "This is the cost to evaluate if the call was successful."
          },
          "successEvaluationPromptTokens": {
            "type": "number",
            "description": "This is the number of prompt tokens used to evaluate if the call was successful."
          },
          "successEvaluationCompletionTokens": {
            "type": "number",
            "description": "This is the number of completion tokens used to evaluate if the call was successful."
          }
        }
      },
      "CostBreakdown": {
        "type": "object",
        "properties": {
          "transport": {
            "type": "number",
            "description": "This is the cost of the transport provider, like Twilio or Vonage."
          },
          "stt": {
            "type": "number",
            "description": "This is the cost of the speech-to-text service."
          },
          "llm": {
            "type": "number",
            "description": "This is the cost of the language model."
          },
          "tts": {
            "type": "number",
            "description": "This is the cost of the text-to-speech service."
          },
          "vapi": {
            "type": "number",
            "description": "This is the cost of Vapi."
          },
          "total": {
            "type": "number",
            "description": "This is the total cost of the call."
          },
          "llmPromptTokens": {
            "type": "number",
            "description": "This is the LLM prompt tokens used for the call."
          },
          "llmCompletionTokens": {
            "type": "number",
            "description": "This is the LLM completion tokens used for the call."
          },
          "ttsCharacters": {
            "type": "number",
            "description": "This is the TTS characters used for the call."
          },
          "analysisCostBreakdown": {
            "description": "This is the cost of the analysis.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisCostBreakdown"
              }
            ]
          }
        }
      },
      "Artifact": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "These are the messages that were spoken during the call.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                }
              ]
            }
          },
          "messagesOpenAIFormatted": {
            "description": "These are the messages that were spoken during the call, formatted for OpenAI.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "videoRecordingUrl": {
            "type": "string",
            "description": "This is video recording url for the call. Enable by setting `assistant.artifactPlan.videoRecordingEnabled`."
          },
          "videoRecordingStartDelaySeconds": {
            "type": "number",
            "description": "This is video recording start delay in ms. Only available when `assistant.artifactPlan.videoRecordingEnabled` is enabled."
          }
        }
      },
      "Analysis": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "This is the summary of the call. Customize by setting `assistant.analysisPlan.summaryPrompt`."
          },
          "structuredData": {
            "type": "object",
            "description": "This is the structured data extracted from the call. Customize by setting `assistant.analysisPlan.structuredDataPrompt` and/or `assistant.analysisPlan.structuredDataSchema`."
          },
          "successEvaluation": {
            "type": "string",
            "description": "This is the evaluation of the call. Customize by setting `assistant.analysisPlan.successEvaluationPrompt` and/or `assistant.analysisPlan.successEvaluationRubric`."
          }
        }
      },
      "Call": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of call.",
            "enum": [
              "inboundPhoneCall",
              "outboundPhoneCall",
              "webCall"
            ]
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that were spoken during the call.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionCallMessage",
                  "title": "FunctionCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionResultMessage",
                  "title": "FunctionResultMessage"
                }
              ]
            }
          },
          "phoneCallProvider": {
            "type": "string",
            "description": "This is the provider of the call.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "enum": [
              "twilio",
              "vonage",
              "vapi"
            ]
          },
          "phoneCallTransport": {
            "type": "string",
            "description": "This is the transport of the phone call.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "enum": [
              "sip",
              "pstn"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the call.",
            "enum": [
              "queued",
              "ringing",
              "in-progress",
              "forwarding",
              "ended"
            ]
          },
          "endedReason": {
            "type": "string",
            "description": "This is the explanation for how the call ended.",
            "enum": [
              "assistant-error",
              "assistant-not-found",
              "db-error",
              "no-server-available",
              "pipeline-error-openai-llm-failed",
              "pipeline-error-azure-openai-llm-failed",
              "pipeline-error-groq-llm-failed",
              "pipeline-error-openai-voice-failed",
              "pipeline-error-cartesia-voice-failed",
              "pipeline-error-deepgram-transcriber-failed",
              "pipeline-error-deepgram-voice-failed",
              "pipeline-error-gladia-transcriber-failed",
              "pipeline-error-eleven-labs-voice-failed",
              "pipeline-error-playht-voice-failed",
              "pipeline-error-lmnt-voice-failed",
              "pipeline-error-azure-voice-failed",
              "pipeline-error-rime-ai-voice-failed",
              "pipeline-error-neets-voice-failed",
              "pipeline-no-available-model",
              "worker-shutdown",
              "twilio-failed-to-connect-call",
              "unknown-error",
              "vonage-disconnected",
              "vonage-failed-to-connect-call",
              "phone-call-provider-bypass-enabled-but-no-call-received",
              "vapi-error-phone-call-worker-setup-socket-error",
              "vapi-error-phone-call-worker-worker-setup-socket-timeout",
              "vapi-error-phone-call-worker-could-not-find-call",
              "vapi-error-phone-call-worker-call-never-connected",
              "vapi-error-web-call-worker-setup-failed",
              "assistant-not-invalid",
              "assistant-not-provided",
              "call-start-error-neither-assistant-nor-server-set",
              "assistant-request-failed",
              "assistant-request-returned-error",
              "assistant-request-returned-unspeakable-error",
              "assistant-request-returned-invalid-assistant",
              "assistant-request-returned-no-assistant",
              "assistant-request-returned-forwarding-phone-number",
              "assistant-ended-call",
              "assistant-said-end-call-phrase",
              "assistant-forwarded-call",
              "assistant-join-timed-out",
              "customer-busy",
              "customer-ended-call",
              "customer-did-not-answer",
              "customer-did-not-give-microphone-permission",
              "assistant-said-message-with-end-call-enabled",
              "exceeded-max-duration",
              "manually-canceled",
              "phone-call-provider-closed-websocket",
              "pipeline-error-anthropic-llm-failed",
              "pipeline-error-together-ai-llm-failed",
              "pipeline-error-anyscale-llm-failed",
              "pipeline-error-openrouter-llm-failed",
              "pipeline-error-perplexity-ai-llm-failed",
              "pipeline-error-deepinfra-llm-failed",
              "pipeline-error-runpod-llm-failed",
              "pipeline-error-custom-llm-llm-failed",
              "pipeline-error-eleven-labs-voice-not-found",
              "pipeline-error-eleven-labs-quota-exceeded",
              "pipeline-error-eleven-labs-unauthorized-access",
              "pipeline-error-eleven-labs-unauthorized-to-access-model",
              "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus",
              "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade",
              "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade",
              "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade",
              "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
              "pipeline-error-eleven-labs-voice-not-fine-tuned",
              "pipeline-error-eleven-labs-invalid-api-key",
              "pipeline-error-eleven-labs-invalid-voice-samples",
              "pipeline-error-eleven-labs-voice-disabled-by-owner",
              "pipeline-error-eleven-labs-blocked-account-in-probation",
              "pipeline-error-eleven-labs-blocked-content-against-their-policy",
              "pipeline-error-playht-request-timed-out",
              "pipeline-error-playht-invalid-voice",
              "pipeline-error-playht-unexpected-error",
              "pipeline-error-playht-out-of-credits",
              "pipeline-error-playht-rate-limit-exceeded",
              "pipeline-error-playht-502-gateway-error",
              "pipeline-error-playht-504-gateway-error",
              "pipeline-error-gladia-transcriber-failed",
              "sip-gateway-failed-to-connect-call",
              "silence-timed-out",
              "voicemail",
              "vonage-rejected"
            ]
          },
          "destination": {
            "description": "This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the call."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this call belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was last updated."
          },
          "startedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was started."
          },
          "endedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the call was ended."
          },
          "cost": {
            "type": "number",
            "description": "This is the cost of the call in USD."
          },
          "costBreakdown": {
            "description": "This is the cost of the call in USD.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CostBreakdown"
              }
            ]
          },
          "costs": {
            "description": "These are the costs of individual components of the call in USD.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript of the call."
          },
          "recordingUrl": {
            "type": "string",
            "description": "This is the URL of the recording of the call."
          },
          "stereoRecordingUrl": {
            "type": "string",
            "description": "This is the URL of the recording of the call in two channels."
          },
          "artifact": {
            "description": "This stores artifacts of the call. Customize what artifacts are created by configuring `assistant.artifactPlan`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Artifact"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          },
          "analysis": {
            "description": "This is the analysis of the call. Customize the analysis by configuring `assistant.analysisPlan`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Analysis"
              }
            ]
          },
          "phoneCallProviderId": {
            "type": "string",
            "description": "The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          },
          "phoneNumberId": {
            "type": "string",
            "description": "This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "phoneNumber": {
            "description": "This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO"
              }
            ]
          },
          "customerId": {
            "type": "string",
            "description": "This is the customer that will be called. To call a transient customer , use `customer` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "customer": {
            "description": "This is the customer that will be called. To call an existing customer, use `customerId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateCustomerDTO"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "This is the name of the call. This is just for your own reference.",
            "maxLength": 40
          }
        },
        "required": [
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "itemsPerPage": {
            "type": "number"
          },
          "totalItems": {
            "type": "number"
          },
          "currentPage": {
            "type": "number"
          }
        },
        "required": [
          "itemsPerPage",
          "totalItems",
          "currentPage"
        ]
      },
      "CallPaginatedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Call"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "results",
          "metadata"
        ]
      },
      "CreateOutboundCallDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the call. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          },
          "phoneNumberId": {
            "type": "string",
            "description": "This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "phoneNumber": {
            "description": "This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImportTwilioPhoneNumberDTO"
              }
            ]
          },
          "customerId": {
            "type": "string",
            "description": "This is the customer that will be called. To call a transient customer , use `customer` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type."
          },
          "customer": {
            "description": "This is the customer that will be called. To call an existing customer, use `customerId` instead.\n\nOnly relevant for `outboundPhoneCall` and `inboundPhoneCall` type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateCustomerDTO"
              }
            ]
          }
        }
      },
      "CreateWebCallDTO": {
        "type": "object",
        "properties": {
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          }
        }
      },
      "UpdateCallDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the call. This is just for your own reference.",
            "maxLength": 40
          }
        }
      },
      "Assistant": {
        "type": "object",
        "properties": {
          "transcriber": {
            "description": "These are the options for the assistant's transcriber.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeepgramTranscriber",
                "title": "DeepgramTranscriber"
              },
              {
                "$ref": "#/components/schemas/GladiaTranscriber",
                "title": "GladiaTranscriber"
              },
              {
                "$ref": "#/components/schemas/TalkscriberTranscriber",
                "title": "TalkscriberTranscriber"
              }
            ]
          },
          "model": {
            "description": "These are the options for the assistant's LLM.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyscaleModel",
                "title": "AnyscaleModel"
              },
              {
                "$ref": "#/components/schemas/AnthropicModel",
                "title": "AnthropicModel"
              },
              {
                "$ref": "#/components/schemas/CustomLLMModel",
                "title": "CustomLLMModel"
              },
              {
                "$ref": "#/components/schemas/DeepInfraModel",
                "title": "DeepInfraModel"
              },
              {
                "$ref": "#/components/schemas/GroqModel",
                "title": "GroqModel"
              },
              {
                "$ref": "#/components/schemas/OpenAIModel",
                "title": "OpenAIModel"
              },
              {
                "$ref": "#/components/schemas/OpenRouterModel",
                "title": "OpenRouterModel"
              },
              {
                "$ref": "#/components/schemas/PerplexityAIModel",
                "title": "PerplexityAIModel"
              },
              {
                "$ref": "#/components/schemas/TogetherAIModel",
                "title": "TogetherAIModel"
              },
              {
                "$ref": "#/components/schemas/VapiModel",
                "title": "VapiModel"
              }
            ]
          },
          "voice": {
            "description": "These are the options for the assistant's voice.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureVoice",
                "title": "AzureVoice"
              },
              {
                "$ref": "#/components/schemas/CartesiaVoice",
                "title": "CartesiaVoice"
              },
              {
                "$ref": "#/components/schemas/DeepgramVoice",
                "title": "DeepgramVoice"
              },
              {
                "$ref": "#/components/schemas/ElevenLabsVoice",
                "title": "ElevenLabsVoice"
              },
              {
                "$ref": "#/components/schemas/LMNTVoice",
                "title": "LMNTVoice"
              },
              {
                "$ref": "#/components/schemas/NeetsVoice",
                "title": "NeetsVoice"
              },
              {
                "$ref": "#/components/schemas/OpenAIVoice",
                "title": "OpenAIVoice"
              },
              {
                "$ref": "#/components/schemas/PlayHTVoice",
                "title": "PlayHTVoice"
              },
              {
                "$ref": "#/components/schemas/RimeAIVoice",
                "title": "RimeAIVoice"
              }
            ],
            "default": {
              "provider": "playht",
              "voiceId": "jennifer"
            }
          },
          "firstMessageMode": {
            "type": "string",
            "description": "This is the mode for the first message. Default is 'assistant-speaks-first'.\n\nUse:\n- 'assistant-speaks-first' to have the assistant speak first.\n- 'assistant-waits-for-user' to have the assistant wait for the user to speak first.\n- 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).\n\n@default 'assistant-speaks-first'",
            "enum": [
              "assistant-speaks-first",
              "assistant-speaks-first-with-model-generated-message",
              "assistant-waits-for-user"
            ],
            "example": "assistant-speaks-first"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true.",
            "example": true
          },
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.",
            "example": false
          },
          "clientMessages": {
            "type": "string",
            "enum": [
              "conversation-update",
              "function-call",
              "function-call-result",
              "hang",
              "metadata",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "tool-calls-result",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "function-call",
              "hang",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "user-interrupted",
              "voice-input"
            ],
            "description": "These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "function-call",
                "function-call-result",
                "hang",
                "metadata",
                "model-output",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "tool-calls-result",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "serverMessages": {
            "type": "string",
            "enum": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "model-output",
              "phone-call-control",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "transfer-destination-request",
              "transfer-update",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "speech-update",
              "status-update",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted"
            ],
            "description": "These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "end-of-call-report",
                "function-call",
                "hang",
                "model-output",
                "phone-call-control",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "transfer-destination-request",
                "transfer-update",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "silenceTimeoutSeconds": {
            "type": "number",
            "description": "How many seconds of silence to wait before ending the call. Defaults to 30.\n\n@default 30",
            "minimum": 10,
            "maximum": 600,
            "example": 30
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.\n\n@default 1800 (~30 minutes)",
            "minimum": 10,
            "maximum": 3600,
            "example": 1800
          },
          "backgroundSound": {
            "type": "string",
            "description": "This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.",
            "enum": [
              "off",
              "office"
            ],
            "example": "office"
          },
          "backchannelingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "backgroundDenoisingEnabled": {
            "type": "boolean",
            "description": "This enables filtering of noise and background speech while the user is talking.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "modelOutputInMessagesEnabled": {
            "type": "boolean",
            "description": "This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "transportConfigurations": {
            "type": "array",
            "description": "These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TransportConfigurationTwilio",
                  "title": "Twilio"
                }
              ]
            }
          },
          "isServerUrlSecretSet": {
            "type": "object"
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant.\n\nThis is required when you want to transfer between assistants in a call.",
            "maxLength": 40
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).\n\nIf unspecified, assistant will wait for user to speak and use the model to respond once they speak.",
            "maxLength": 1000
          },
          "voicemailDetection": {
            "description": "These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].\nThis uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.\nYou can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioVoicemailDetection"
              }
            ]
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 1000
          },
          "endCallMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if it ends the call.\n\nIf unspecified, it will hang up without saying anything.",
            "maxLength": 1000
          },
          "endCallPhrases": {
            "description": "This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 140,
              "minLength": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "This is for metadata you want to store on the assistant."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl"
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "analysisPlan": {
            "description": "This is the plan for analysis of assistant's calls. Stored in `call.analysis`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisPlan"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.\n\nNote: `recordingEnabled` is currently at the root level. It will be moved to `artifactPlan` in the future, but will remain backwards compatible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          },
          "messagePlan": {
            "description": "This is the plan for static messages that can be spoken by the assistant during the call, like `idleMessages`.\n\nNote: `firstMessage`, `voicemailMessage`, and `endCallMessage` are currently at the root level. They will be moved to `messagePlan` in the future, but will remain backwards compatible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessagePlan"
              }
            ]
          },
          "pipelineConfiguration": {
            "description": "This is the pipeline configuration for assistant's calls.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineConfiguration"
              }
            ]
          },
          "credentialIds": {
            "description": "These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the assistant."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this assistant belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "isServerUrlSecretSet",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateAssistantDTO": {
        "type": "object",
        "properties": {
          "transcriber": {
            "description": "These are the options for the assistant's transcriber.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/DeepgramTranscriber",
                "title": "DeepgramTranscriber"
              },
              {
                "$ref": "#/components/schemas/GladiaTranscriber",
                "title": "GladiaTranscriber"
              },
              {
                "$ref": "#/components/schemas/TalkscriberTranscriber",
                "title": "TalkscriberTranscriber"
              }
            ]
          },
          "model": {
            "description": "These are the options for the assistant's LLM.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AnyscaleModel",
                "title": "AnyscaleModel"
              },
              {
                "$ref": "#/components/schemas/AnthropicModel",
                "title": "AnthropicModel"
              },
              {
                "$ref": "#/components/schemas/CustomLLMModel",
                "title": "CustomLLMModel"
              },
              {
                "$ref": "#/components/schemas/DeepInfraModel",
                "title": "DeepInfraModel"
              },
              {
                "$ref": "#/components/schemas/GroqModel",
                "title": "GroqModel"
              },
              {
                "$ref": "#/components/schemas/OpenAIModel",
                "title": "OpenAIModel"
              },
              {
                "$ref": "#/components/schemas/OpenRouterModel",
                "title": "OpenRouterModel"
              },
              {
                "$ref": "#/components/schemas/PerplexityAIModel",
                "title": "PerplexityAIModel"
              },
              {
                "$ref": "#/components/schemas/TogetherAIModel",
                "title": "TogetherAIModel"
              },
              {
                "$ref": "#/components/schemas/VapiModel",
                "title": "VapiModel"
              }
            ]
          },
          "voice": {
            "description": "These are the options for the assistant's voice.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/AzureVoice",
                "title": "AzureVoice"
              },
              {
                "$ref": "#/components/schemas/CartesiaVoice",
                "title": "CartesiaVoice"
              },
              {
                "$ref": "#/components/schemas/DeepgramVoice",
                "title": "DeepgramVoice"
              },
              {
                "$ref": "#/components/schemas/ElevenLabsVoice",
                "title": "ElevenLabsVoice"
              },
              {
                "$ref": "#/components/schemas/LMNTVoice",
                "title": "LMNTVoice"
              },
              {
                "$ref": "#/components/schemas/NeetsVoice",
                "title": "NeetsVoice"
              },
              {
                "$ref": "#/components/schemas/OpenAIVoice",
                "title": "OpenAIVoice"
              },
              {
                "$ref": "#/components/schemas/PlayHTVoice",
                "title": "PlayHTVoice"
              },
              {
                "$ref": "#/components/schemas/RimeAIVoice",
                "title": "RimeAIVoice"
              }
            ],
            "default": {
              "provider": "playht",
              "voiceId": "jennifer"
            }
          },
          "firstMessageMode": {
            "type": "string",
            "description": "This is the mode for the first message. Default is 'assistant-speaks-first'.\n\nUse:\n- 'assistant-speaks-first' to have the assistant speak first.\n- 'assistant-waits-for-user' to have the assistant wait for the user to speak first.\n- 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state. (`assistant.model.messages` at call start, `call.messages` at squad transfer points).\n\n@default 'assistant-speaks-first'",
            "enum": [
              "assistant-speaks-first",
              "assistant-speaks-first-with-model-generated-message",
              "assistant-waits-for-user"
            ],
            "example": "assistant-speaks-first"
          },
          "recordingEnabled": {
            "type": "boolean",
            "description": "This sets whether the assistant's calls are recorded. Defaults to true.",
            "example": true
          },
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.",
            "example": false
          },
          "clientMessages": {
            "type": "string",
            "enum": [
              "conversation-update",
              "function-call",
              "function-call-result",
              "hang",
              "metadata",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "tool-calls-result",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "function-call",
              "hang",
              "model-output",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "user-interrupted",
              "voice-input"
            ],
            "description": "These are the messages that will be sent to your Client SDKs. Default is conversation-update,function-call,hang,model-output,speech-update,status-update,transcript,tool-calls,user-interrupted,voice-input. You can check the shape of the messages in ClientMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "function-call",
                "function-call-result",
                "hang",
                "metadata",
                "model-output",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "tool-calls-result",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "serverMessages": {
            "type": "string",
            "enum": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "model-output",
              "phone-call-control",
              "speech-update",
              "status-update",
              "transcript",
              "tool-calls",
              "transfer-destination-request",
              "transfer-update",
              "user-interrupted",
              "voice-input"
            ],
            "example": [
              "conversation-update",
              "end-of-call-report",
              "function-call",
              "hang",
              "speech-update",
              "status-update",
              "tool-calls",
              "transfer-destination-request",
              "user-interrupted"
            ],
            "description": "These are the messages that will be sent to your Server URL. Default is conversation-update,end-of-call-report,function-call,hang,speech-update,status-update,tool-calls,transfer-destination-request,user-interrupted. You can check the shape of the messages in ServerMessage schema.",
            "items": {
              "type": "string",
              "enum": [
                "conversation-update",
                "end-of-call-report",
                "function-call",
                "hang",
                "model-output",
                "phone-call-control",
                "speech-update",
                "status-update",
                "transcript",
                "tool-calls",
                "transfer-destination-request",
                "transfer-update",
                "user-interrupted",
                "voice-input"
              ]
            }
          },
          "silenceTimeoutSeconds": {
            "type": "number",
            "description": "How many seconds of silence to wait before ending the call. Defaults to 30.\n\n@default 30",
            "minimum": 10,
            "maximum": 600,
            "example": 30
          },
          "maxDurationSeconds": {
            "type": "number",
            "description": "This is the maximum number of seconds that the call will last. When the call reaches this duration, it will be ended.\n\n@default 1800 (~30 minutes)",
            "minimum": 10,
            "maximum": 3600,
            "example": 1800
          },
          "backgroundSound": {
            "type": "string",
            "description": "This is the background sound in the call. Default for phone calls is 'office' and default for web calls is 'off'.",
            "enum": [
              "off",
              "office"
            ],
            "example": "office"
          },
          "backchannelingEnabled": {
            "type": "boolean",
            "description": "This determines whether the model says 'mhmm', 'ahem' etc. while user is speaking.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "backgroundDenoisingEnabled": {
            "type": "boolean",
            "description": "This enables filtering of noise and background speech while the user is talking.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "modelOutputInMessagesEnabled": {
            "type": "boolean",
            "description": "This determines whether the model's output is used in conversation history rather than the transcription of assistant's speech.\n\nDefault `false` while in beta.\n\n@default false",
            "example": false
          },
          "transportConfigurations": {
            "type": "array",
            "description": "These are the configurations to be passed to the transport providers of assistant's calls, like Twilio. You can store multiple configurations for different transport providers. For a call, only the configuration matching the call transport provider is used.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TransportConfigurationTwilio",
                  "title": "Twilio"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the assistant.\n\nThis is required when you want to transfer between assistants in a call.",
            "maxLength": 40
          },
          "firstMessage": {
            "type": "string",
            "description": "This is the first message that the assistant will say. This can also be a URL to a containerized audio file (mp3, wav, etc.).\n\nIf unspecified, assistant will wait for user to speak and use the model to respond once they speak.",
            "maxLength": 1000
          },
          "voicemailDetection": {
            "description": "These are the settings to configure or disable voicemail detection. Alternatively, voicemail detection can be configured using the model.tools=[VoicemailTool].\nThis uses Twilio's built-in detection while the VoicemailTool relies on the model to detect if a voicemail was reached.\nYou can use neither of them, one of them, or both of them. By default, Twilio built-in detection is enabled while VoicemailTool is not.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TwilioVoicemailDetection"
              }
            ]
          },
          "voicemailMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if the call is forwarded to voicemail.\n\nIf unspecified, it will hang up.",
            "maxLength": 1000
          },
          "endCallMessage": {
            "type": "string",
            "description": "This is the message that the assistant will say if it ends the call.\n\nIf unspecified, it will hang up without saying anything.",
            "maxLength": 1000
          },
          "endCallPhrases": {
            "description": "This list contains phrases that, if spoken by the assistant, will trigger the call to be hung up. Case insensitive.",
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 140,
              "minLength": 2
            }
          },
          "metadata": {
            "type": "object",
            "description": "This is for metadata you want to store on the assistant."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl"
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "analysisPlan": {
            "description": "This is the plan for analysis of assistant's calls. Stored in `call.analysis`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AnalysisPlan"
              }
            ]
          },
          "artifactPlan": {
            "description": "This is the plan for artifacts generated during assistant's calls. Stored in `call.artifact`.\n\nNote: `recordingEnabled` is currently at the root level. It will be moved to `artifactPlan` in the future, but will remain backwards compatible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ArtifactPlan"
              }
            ]
          },
          "messagePlan": {
            "description": "This is the plan for static messages that can be spoken by the assistant during the call, like `idleMessages`.\n\nNote: `firstMessage`, `voicemailMessage`, and `endCallMessage` are currently at the root level. They will be moved to `messagePlan` in the future, but will remain backwards compatible.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MessagePlan"
              }
            ]
          },
          "pipelineConfiguration": {
            "description": "This is the pipeline configuration for assistant's calls.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PipelineConfiguration"
              }
            ]
          },
          "credentialIds": {
            "description": "These are the credentials that will be used for the assistant calls. By default, all the credentials are available for use in the call but you can provide a subset using this.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ByoPhoneNumber": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "This is to bring your own phone numbers from your own SIP trunks or Carriers.",
            "enum": [
              "byo-phone-number"
            ]
          },
          "numberE164CheckEnabled": {
            "type": "boolean",
            "description": "This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.\n\nUse cases:\n- `false`: To allow non-E164 numbers like `+001234567890`, `1234', or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks.\n- `true` (default): To allow only E164 numbers like `+14155551234`. This is for most standard PSTN calls.\n\nIf `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\\+?[a-zA-Z0-9]+$/`).\n\n@default true (E164 check is enabled)",
            "default": true
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the phone number."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this phone number belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was last updated."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "number": {
            "type": "string",
            "description": "This is the number of the customer.",
            "minLength": 3,
            "maxLength": 40
          },
          "credentialId": {
            "type": "string",
            "description": "This is the credential of your own SIP trunk or Carrier (type `byo-sip-trunk`) which can be used to make calls to this phone number.\n\nYou can add the SIP trunk or Carrier credential in the Provider Credentials page on the Dashboard to get the credentialId."
          }
        },
        "required": [
          "provider",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "credentialId"
        ]
      },
      "TwilioPhoneNumber": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "This is to use numbers bought on Twilio.",
            "enum": [
              "twilio"
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the phone number."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this phone number belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was last updated."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "number": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Twilio."
          },
          "twilioAccountSid": {
            "type": "string",
            "description": "This is the Twilio Account SID for the phone number."
          },
          "twilioAuthToken": {
            "type": "string",
            "description": "This is the Twilio Auth Token for the phone number."
          }
        },
        "required": [
          "provider",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "number",
          "twilioAccountSid",
          "twilioAuthToken"
        ]
      },
      "VonagePhoneNumber": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "This is to use numbers bought on Vonage.",
            "enum": [
              "vonage"
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the phone number."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this phone number belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was last updated."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "number": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Vonage."
          },
          "credentialId": {
            "type": "string",
            "description": "This is the credential that is used to make outgoing calls, and do operations like call transfer and hang up."
          }
        },
        "required": [
          "provider",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "number",
          "credentialId"
        ]
      },
      "VapiPhoneNumber": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "This is to create free SIP phone numbers on Vapi.",
            "enum": [
              "vapi"
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the phone number."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this phone number belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the phone number was last updated."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          },
          "sipUri": {
            "type": "string",
            "description": "This is the SIP URI of the phone number. You can SIP INVITE this. The assistant attached to this number will answer."
          }
        },
        "required": [
          "provider",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "sipUri"
        ]
      },
      "CreateByoPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "This is to bring your own phone numbers from your own SIP trunks or Carriers.",
            "enum": [
              "byo-phone-number"
            ]
          },
          "numberE164CheckEnabled": {
            "type": "boolean",
            "description": "This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.\n\nUse cases:\n- `false`: To allow non-E164 numbers like `+001234567890`, `1234', or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks.\n- `true` (default): To allow only E164 numbers like `+14155551234`. This is for most standard PSTN calls.\n\nIf `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\\+?[a-zA-Z0-9]+$/`).\n\n@default true (E164 check is enabled)",
            "default": true
          },
          "number": {
            "type": "string",
            "description": "This is the number of the customer.",
            "minLength": 3,
            "maxLength": 40
          },
          "credentialId": {
            "type": "string",
            "description": "This is the credential of your own SIP trunk or Carrier (type `byo-sip-trunk`) which can be used to make calls to this phone number.\n\nYou can add the SIP trunk or Carrier credential in the Provider Credentials page on the Dashboard to get the credentialId."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "provider",
          "credentialId"
        ]
      },
      "CreateTwilioPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "This is to use numbers bought on Twilio.",
            "enum": [
              "twilio"
            ]
          },
          "number": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Twilio."
          },
          "twilioAccountSid": {
            "type": "string",
            "description": "This is the Twilio Account SID for the phone number."
          },
          "twilioAuthToken": {
            "type": "string",
            "description": "This is the Twilio Auth Token for the phone number."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "provider",
          "number",
          "twilioAccountSid",
          "twilioAuthToken"
        ]
      },
      "CreateVonagePhoneNumberDTO": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "This is to use numbers bought on Vonage.",
            "enum": [
              "vonage"
            ]
          },
          "number": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Vonage."
          },
          "credentialId": {
            "type": "string",
            "description": "This is the credential that is used to make outgoing calls, and do operations like call transfer and hang up."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "provider",
          "number",
          "credentialId"
        ]
      },
      "CreateVapiPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "provider": {
            "type": "string",
            "description": "This is to create free SIP phone numbers on Vapi.",
            "enum": [
              "vapi"
            ]
          },
          "sipUri": {
            "type": "string",
            "description": "This is the SIP URI of the phone number. You can SIP INVITE this. The assistant attached to this number will answer."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "provider",
          "sipUri"
        ]
      },
      "BuyPhoneNumberDTO": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "areaCode": {
            "type": "string",
            "description": "This is the area code of the phone number to purchase.",
            "minLength": 3,
            "maxLength": 3
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "areaCode"
        ]
      },
      "ImportVonagePhoneNumberDTO": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "vonagePhoneNumber": {
            "type": "string",
            "description": "These are the digits of the phone number you own on your Vonage.",
            "deprecated": true
          },
          "credentialId": {
            "type": "string",
            "description": "This is the credential that is used to make outgoing calls, and do operations like call transfer and hang up.\n\nYou can add the Vonage Credential in the Provider Credentials page on the dashboard to get the credentialId."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        },
        "required": [
          "vonagePhoneNumber",
          "credentialId"
        ]
      },
      "UpdatePhoneNumberDTO": {
        "type": "object",
        "properties": {
          "fallbackDestination": {
            "description": "This is the fallback destination an inbound call will be transferred to if:\n1. `assistantId` is not set\n2. `squadId` is not set\n3. and, `assistant-request` message to the `serverUrl` fails\n\nIf this is not set and above conditions are met, the inbound call is hung up with an error message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "This is the name of the phone number. This is just for your own reference.",
            "maxLength": 40
          },
          "assistantId": {
            "type": "string",
            "description": "This is the assistant that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for incoming calls to this phone number.\n\nIf neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected."
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.\n\nYou can see the shape of the messages sent in `ServerMessage`.\n\nThis overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.\n\nSame precedence logic as serverUrl."
          }
        }
      },
      "Squad": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the squad."
          },
          "members": {
            "description": "This is the list of assistants that make up the squad.\n\nThe call will start with the first assistant in the list.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SquadMemberDTO"
            }
          },
          "membersOverrides": {
            "description": "This can be used to override all the assistants' settings and provide values for their template variables.\n\nBoth `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the squad."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this squad belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the squad was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the squad was last updated."
          }
        },
        "required": [
          "members",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateSquadDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the squad."
          },
          "members": {
            "description": "This is the list of assistants that make up the squad.\n\nThe call will start with the first assistant in the list.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SquadMemberDTO"
            }
          },
          "membersOverrides": {
            "description": "This can be used to override all the assistants' settings and provide values for their template variables.\n\nBoth `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          }
        },
        "required": [
          "members"
        ]
      },
      "ConversationBlock": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "These are the pre-configured messages that will be spoken to the user while the block is running.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockStartMessage",
                  "title": "BlockStartMessage"
                },
                {
                  "$ref": "#/components/schemas/BlockCompleteMessage",
                  "title": "BlockCompleteMessage"
                }
              ]
            }
          },
          "inputSchema": {
            "description": "This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`\n\nThese are accessible as variables:\n- ({{input.propertyName}}) in context of the block execution (step)\n- ({{stepName.input.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "outputSchema": {
            "description": "This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).\n\nThese are accessible as variables:\n- ({{output.propertyName}}) in context of the block execution (step)\n- ({{stepName.output.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "This block is used for conversation. This can be a free flow conversation or a conversation with a specific goal like collecting some information.\n\nFor free block conversation, put clearly in the `instruction` when the block can be considered done.\n```\n{\n \"type\": \"conversation\",\n \"instruction\": \"Chit chat with the user asking them about their day. When user asks a specific question or once you have talked to the user for a couple of turns of conversation, move on.\"\n}\n```\n\nFor conversation with a specific goal, you can define an `outputSchema` with required fields. The block won't be considered done until the user has provided all the required fields in the `outputSchema`.\n```\n{\n \"type\": \"conversation\",\n \"instruction\": \"Ask the user about their hobbies, hopes and dreams.\",\n \"outputSchema\": {\n   \"type\": \"object\",\n   \"properties\": {\n     \"hobbies\": {\n       \"type\": \"string\"\n     },\n     \"hopes\": {\n       \"type\": \"string\"\n     },\n     \"dreams\": {\n       \"type\": \"string\"\n     }\n   },\n   \"required\": [\"hobbies\"]\n }\n}\n```\nFor the above example, the conversation block will be considered done once the user has provided the `hobbies` (even if they have not provided the `hopes` and `dreams`).",
            "enum": [
              "conversation"
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the block."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this block belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the block was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the block was last updated."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the block. This is just for your reference."
          },
          "instruction": {
            "type": "string",
            "description": "This is the instruction to the model.\n\nYou can reference any variable in the context of the current block execution (step):\n- \"{{input.your-property-name}}\" for the current step's input\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow)\n- \"{{workflow.input.your-property-name}}\" for the current workflow's input\n- \"{{global.your-property-name}}\" for the global context\n\nThis can be as simple or as complex as you want it to be.\n- \"say hello and ask the user about their day!\"\n- \"collect the user's first and last name\"\n- \"user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}\"",
            "minLength": 1
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "instruction"
        ]
      },
      "ToolCallBlock": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "These are the pre-configured messages that will be spoken to the user while the block is running.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockStartMessage",
                  "title": "BlockStartMessage"
                },
                {
                  "$ref": "#/components/schemas/BlockCompleteMessage",
                  "title": "BlockCompleteMessage"
                }
              ]
            }
          },
          "inputSchema": {
            "description": "This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`\n\nThese are accessible as variables:\n- ({{input.propertyName}}) in context of the block execution (step)\n- ({{stepName.input.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "outputSchema": {
            "description": "This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).\n\nThese are accessible as variables:\n- ({{output.propertyName}}) in context of the block execution (step)\n- ({{stepName.output.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "This block makes a tool call.",
            "enum": [
              "tool-call"
            ]
          },
          "tool": {
            "description": "This is the tool that the block will call. To use an existing tool, use `toolId`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateDtmfToolDTO",
                "title": "DtmfTool"
              },
              {
                "$ref": "#/components/schemas/CreateEndCallToolDTO",
                "title": "EndCallTool"
              },
              {
                "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                "title": "VoicemailTool"
              },
              {
                "$ref": "#/components/schemas/CreateFunctionToolDTO",
                "title": "FunctionTool"
              },
              {
                "$ref": "#/components/schemas/CreateGhlToolDTO",
                "title": "GhlTool"
              },
              {
                "$ref": "#/components/schemas/CreateMakeToolDTO",
                "title": "MakeTool"
              },
              {
                "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                "title": "TransferCallTool"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the block."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this block belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the block was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the block was last updated."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the block. This is just for your reference."
          },
          "toolId": {
            "type": "string",
            "description": "This is the id of the tool that the block will call. To use a transient tool, use `tool`."
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "WorkflowBlock": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "These are the pre-configured messages that will be spoken to the user while the block is running.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockStartMessage",
                  "title": "BlockStartMessage"
                },
                {
                  "$ref": "#/components/schemas/BlockCompleteMessage",
                  "title": "BlockCompleteMessage"
                }
              ]
            }
          },
          "inputSchema": {
            "description": "This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`\n\nThese are accessible as variables:\n- ({{input.propertyName}}) in context of the block execution (step)\n- ({{stepName.input.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "outputSchema": {
            "description": "This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).\n\nThese are accessible as variables:\n- ({{output.propertyName}}) in context of the block execution (step)\n- ({{stepName.output.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "This creates a workflow which can contain any number of steps (block executions).",
            "enum": [
              "workflow"
            ]
          },
          "steps": {
            "type": "array",
            "description": "These are the steps in the workflow.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HandoffStep",
                  "title": "HandoffStep"
                },
                {
                  "$ref": "#/components/schemas/CallbackStep",
                  "title": "CallbackStep"
                }
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the block."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this block belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the block was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the block was last updated."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the block. This is just for your reference."
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "RuleBasedCondition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This condition is based on a strict rule.",
            "enum": [
              "rule-based"
            ]
          },
          "operator": {
            "type": "string",
            "description": "This is the operator you want to use to compare the left side and right side.\n\nThe operation becomes `(leftSide) operator (rightSide)`.",
            "enum": [
              "eq",
              "neq",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "pattern": "ALLOWED_REGEX"
          },
          "leftSide": {
            "type": "string",
            "description": "This is the left side of the operation.\n\nYou can reference any variable in the context of the current block execution (step):\n- \"{{output.your-property-name}}\" for current step's output\n- \"{{input.your-property-name}}\" for current step's input\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow)\n- \"{{workflow.input.your-property-name}}\" for the current workflow's input\n- \"{{global.your-property-name}}\" for the global context\n\nOr, you can use a constant:\n- \"1\"\n- \"text\"\n- \"true\"\n- \"false\"\n\nOr, you can mix and match with string interpolation:\n- \"{{your-property-name}}-{{input.your-property-name-2}}-1\"",
            "pattern": "ALLOWED_REGEX"
          },
          "rightSide": {
            "type": "string",
            "description": "This is the right side of the operation.\n\nYou can reference any variable in the context of the current block execution (step):\n- \"{{output.your-property-name}}\" for current step's output\n- \"{{input.your-property-name}}\" for current step's input\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow)\n- \"{{workflow.input.your-property-name}}\" for the current workflow's input\n- \"{{global.your-property-name}}\" for the global context\n\nOr, you can use a constant:\n- \"1\"\n- \"text\"\n- \"true\"\n- \"false\"\n\nOr, you can mix and match with string interpolation:\n- \"{{your-property-name}}-{{input.your-property-name-2}}-1\"",
            "pattern": "ALLOWED_REGEX"
          }
        },
        "required": [
          "type",
          "operator",
          "leftSide",
          "rightSide"
        ]
      },
      "ModelBasedCondition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This condition is based on a model.",
            "enum": [
              "model-based"
            ]
          },
          "instruction": {
            "type": "string",
            "description": "This is the instruction which should output a boolean value when passed to a model.\n\nYou can reference any variable in the context of the current block execution (step):\n- \"{{output.your-property-name}}\" for current step's output\n- \"{{input.your-property-name}}\" for current step's input\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow)\n- \"{{workflow.input.your-property-name}}\" for the current workflow's input\n- \"{{global.your-property-name}}\" for the global context\n\nYou can also talk about the current step's output or input directly:\n- \"{{output.your-property-name}} is greater than 10\"\n- \"{{input.your-property-name}} is greater than 10\"\n\nExamples:\n - \"{{input.age}} is greater than 10\"\n - \"{{input.age}} is greater than {{input.age2}}\"\n - \"{{output.age}} is greater than 10\"",
            "minLength": 1
          }
        },
        "required": [
          "type",
          "instruction"
        ]
      },
      "BlockStartMessage": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "This is an optional array of conditions that must be met for this message to be triggered.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ModelBasedCondition",
                  "title": "ModelBasedCondition"
                },
                {
                  "$ref": "#/components/schemas/RuleBasedCondition",
                  "title": "RuleBasedCondition"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "description": "This is the message type that is triggered when the block starts.",
            "enum": [
              "block-start"
            ]
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant will say when this message is triggered."
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "BlockCompleteMessage": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "This is an optional array of conditions that must be met for this message to be triggered.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ModelBasedCondition",
                  "title": "ModelBasedCondition"
                },
                {
                  "$ref": "#/components/schemas/RuleBasedCondition",
                  "title": "RuleBasedCondition"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "description": "This is the message type that is triggered when the block completes.",
            "enum": [
              "block-complete"
            ]
          },
          "content": {
            "type": "string",
            "description": "This is the content that the assistant will say when this message is triggered."
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "CreateConversationBlockDTO": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "These are the pre-configured messages that will be spoken to the user while the block is running.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockStartMessage",
                  "title": "BlockStartMessage"
                },
                {
                  "$ref": "#/components/schemas/BlockCompleteMessage",
                  "title": "BlockCompleteMessage"
                }
              ]
            }
          },
          "inputSchema": {
            "description": "This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`\n\nThese are accessible as variables:\n- ({{input.propertyName}}) in context of the block execution (step)\n- ({{stepName.input.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "outputSchema": {
            "description": "This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).\n\nThese are accessible as variables:\n- ({{output.propertyName}}) in context of the block execution (step)\n- ({{stepName.output.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "This block is used for conversation. This can be a free flow conversation or a conversation with a specific goal like collecting some information.\n\nFor free block conversation, put clearly in the `instruction` when the block can be considered done.\n```\n{\n \"type\": \"conversation\",\n \"instruction\": \"Chit chat with the user asking them about their day. When user asks a specific question or once you have talked to the user for a couple of turns of conversation, move on.\"\n}\n```\n\nFor conversation with a specific goal, you can define an `outputSchema` with required fields. The block won't be considered done until the user has provided all the required fields in the `outputSchema`.\n```\n{\n \"type\": \"conversation\",\n \"instruction\": \"Ask the user about their hobbies, hopes and dreams.\",\n \"outputSchema\": {\n   \"type\": \"object\",\n   \"properties\": {\n     \"hobbies\": {\n       \"type\": \"string\"\n     },\n     \"hopes\": {\n       \"type\": \"string\"\n     },\n     \"dreams\": {\n       \"type\": \"string\"\n     }\n   },\n   \"required\": [\"hobbies\"]\n }\n}\n```\nFor the above example, the conversation block will be considered done once the user has provided the `hobbies` (even if they have not provided the `hopes` and `dreams`).",
            "enum": [
              "conversation"
            ]
          },
          "instruction": {
            "type": "string",
            "description": "This is the instruction to the model.\n\nYou can reference any variable in the context of the current block execution (step):\n- \"{{input.your-property-name}}\" for the current step's input\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow)\n- \"{{workflow.input.your-property-name}}\" for the current workflow's input\n- \"{{global.your-property-name}}\" for the global context\n\nThis can be as simple or as complex as you want it to be.\n- \"say hello and ask the user about their day!\"\n- \"collect the user's first and last name\"\n- \"user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}\"",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "This is the name of the block. This is just for your reference."
          }
        },
        "required": [
          "type",
          "instruction"
        ]
      },
      "CreateToolCallBlockDTO": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "These are the pre-configured messages that will be spoken to the user while the block is running.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockStartMessage",
                  "title": "BlockStartMessage"
                },
                {
                  "$ref": "#/components/schemas/BlockCompleteMessage",
                  "title": "BlockCompleteMessage"
                }
              ]
            }
          },
          "inputSchema": {
            "description": "This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`\n\nThese are accessible as variables:\n- ({{input.propertyName}}) in context of the block execution (step)\n- ({{stepName.input.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "outputSchema": {
            "description": "This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).\n\nThese are accessible as variables:\n- ({{output.propertyName}}) in context of the block execution (step)\n- ({{stepName.output.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "This block makes a tool call.",
            "enum": [
              "tool-call"
            ]
          },
          "tool": {
            "description": "This is the tool that the block will call. To use an existing tool, use `toolId`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateDtmfToolDTO",
                "title": "DtmfTool"
              },
              {
                "$ref": "#/components/schemas/CreateEndCallToolDTO",
                "title": "EndCallTool"
              },
              {
                "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                "title": "VoicemailTool"
              },
              {
                "$ref": "#/components/schemas/CreateFunctionToolDTO",
                "title": "FunctionTool"
              },
              {
                "$ref": "#/components/schemas/CreateGhlToolDTO",
                "title": "GhlTool"
              },
              {
                "$ref": "#/components/schemas/CreateMakeToolDTO",
                "title": "MakeTool"
              },
              {
                "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                "title": "TransferCallTool"
              }
            ]
          },
          "toolId": {
            "type": "string",
            "description": "This is the id of the tool that the block will call. To use a transient tool, use `tool`."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the block. This is just for your reference."
          }
        },
        "required": [
          "type"
        ]
      },
      "StepDestination": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "step"
            ]
          },
          "conditions": {
            "type": "array",
            "description": "This is an optional array of conditions that must be met for this destination to be triggered. If empty, this is the default destination that the step transfers to.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ModelBasedCondition",
                  "title": "ModelBasedCondition"
                },
                {
                  "$ref": "#/components/schemas/RuleBasedCondition",
                  "title": "RuleBasedCondition"
                }
              ]
            }
          },
          "stepName": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "type",
          "stepName"
        ]
      },
      "HandoffStep": {
        "type": "object",
        "properties": {
          "block": {
            "description": "This is the block to use. To use an existing block, use `blockId`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateConversationBlockDTO",
                "title": "ConversationBlock"
              },
              {
                "$ref": "#/components/schemas/CreateToolCallBlockDTO",
                "title": "ToolCallBlock"
              },
              {
                "$ref": "#/components/schemas/CreateWorkflowBlockDTO",
                "title": "WorkflowBlock",
                "description": "This is the CreateWorkflowBlockDTO object but Swagger does not display nested schemas correctly."
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "This is a step that takes a handoff from the previous step. This means it won't return to the calling step. The workflow execution will continue linearly.\n\nUse case:\n- You want to collect information linearly (e.g. a form, provide information, etc).",
            "enum": [
              "handoff"
            ]
          },
          "destinations": {
            "type": "array",
            "description": "These are the destinations that the step can go to after it's done.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/StepDestination",
                  "title": "StepDestination"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the step.",
            "minLength": 1
          },
          "blockId": {
            "type": "string",
            "description": "This is the id of the block to use. To use a transient block, use `block`."
          },
          "input": {
            "type": "object",
            "description": "This is the input to the block. You can use any key-value map as input to the block.\n\nExample:\n{\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nYou can reference any variable in the context of the current block:\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow)\n- \"{{workflow.input.your-property-name}}\" for the current workflow's input\n- \"{{global.your-property-name}}\" for the global context\n\nExample:\n{\n  \"name\": \"{{my-tool-call-step.output.name}}\",\n  \"age\": \"{{my-tool-call-step.input.age}}\",\n  \"date\": \"{{workflow.input.date}}\"\n}\n\nYou can dynamically change the key name.\n\nExample:\n{\n  \"{{my-tool-call-step.output.key-name-for-name}}\": \"{{name}}\",\n  \"{{my-tool-call-step.input.key-name-for-age}}\": \"{{age}}\",\n  \"{{workflow.input.key-name-for-date}}\": \"{{date}}\"\n}\n\nYou can represent the value as a string, number, boolean, array, or object.\n\nExample:\n{\n  \"name\": \"john\",\n  \"age\": 20,\n  \"date\": \"2021-01-01\",\n  \"metadata\": {\n    \"unique-key\": \"{{my-tool-call-step.output.unique-key}}\"\n  },\n  \"array\": [\"A\", \"B\", \"C\"],\n}"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "AssignmentMutation": {
        "type": "object",
        "properties": {
          "conditions": {
            "type": "array",
            "description": "This is an optional array of conditions that must be met for this mutation to be triggered.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ModelBasedCondition",
                  "title": "ModelBasedCondition"
                },
                {
                  "$ref": "#/components/schemas/RuleBasedCondition",
                  "title": "RuleBasedCondition"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "description": "This mutation assigns a new value to an existing or new variable.",
            "enum": [
              "assignment"
            ]
          },
          "variable": {
            "type": "string",
            "description": "This is the variable to assign a new value to.\n\nYou can reference any variable in the context of the current block execution (step):\n- \"output.your-property-name\" for current step's output\n- \"your-step-name.output.your-property-name\" for another step's output (in the same workflow)\n- \"global.your-property-name\" for the global context\n\nThis needs to be the key path of the variable. If you use {{}}, it'll dereference that to the value of the variable before assignment. This can be useful if the path is dynamic. Example:\n- \"global.{{my-tool-call-step.output.my-key-name}}\"\n\nYou can also string interpolate multiple variables to get the key name:\n- \"global.{{my-tool-call-step.output.my-key-name-suffix}}-{{my-tool-call-step.output.my-key-name}}\"\n\nThe path to the new variable is created if it doesn't exist. Example:\n- \"global.this-does-not-exist.neither-does-this\" will create `this-does-not-exist` object with `neither-does-this` as a key"
          },
          "value": {
            "type": "string",
            "description": "The value to assign to the variable.\n\nYou can reference any variable in the context of the current block execution (step):\n- \"{{output.your-property-name}}\" for current step's output\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{global.your-property-name}}\" for the global context\n\nOr, you can use a constant:\n- \"1\"\n- \"text\"\n- \"true\"\n- \"false\"\n\nOr, you can mix and match with string interpolation:\n- \"{{your-property-name}}-{{input.your-property-name-2}}-1\"",
            "pattern": "ALLOWED_REGEX"
          }
        },
        "required": [
          "type",
          "variable",
          "value"
        ]
      },
      "CallbackStep": {
        "type": "object",
        "properties": {
          "block": {
            "description": "This is the block to use. To use an existing block, use `blockId`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateConversationBlockDTO",
                "title": "ConversationBlock"
              },
              {
                "$ref": "#/components/schemas/CreateToolCallBlockDTO",
                "title": "ToolCallBlock"
              },
              {
                "$ref": "#/components/schemas/CreateWorkflowBlockDTO",
                "title": "WorkflowBlock",
                "description": "This is the CreateWorkflowBlockDTO object but Swagger does not display nested schemas correctly."
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "This is a step that calls back to the previous step after it's done. This effectively means we're spawning a new conversation thread. The previous conversation thread will resume where it left off once this step is done.\n\nUse case:\n- You are collecting a customer's order and while they were on one item, they start a new item or try to modify a previous one. You would make a OrderUpdate block which calls the same block repeatedly when a new update starts.",
            "enum": [
              "callback"
            ]
          },
          "mutations": {
            "type": "array",
            "description": "This is the mutations to apply to the context after the step is done.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssignmentMutation",
                  "title": "AssignmentMutation"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the step.",
            "minLength": 1
          },
          "blockId": {
            "type": "string",
            "description": "This is the id of the block to use. To use a transient block, use `block`."
          },
          "input": {
            "type": "object",
            "description": "This is the input to the block. You can use any key-value map as input to the block.\n\nExample:\n{\n  \"name\": \"John Doe\",\n  \"age\": 20\n}\n\nYou can reference any variable in the context of the current block:\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow)\n- \"{{workflow.input.your-property-name}}\" for the current workflow's input\n- \"{{global.your-property-name}}\" for the global context\n\nExample:\n{\n  \"name\": \"{{my-tool-call-step.output.name}}\",\n  \"age\": \"{{my-tool-call-step.input.age}}\",\n  \"date\": \"{{workflow.input.date}}\"\n}\n\nYou can dynamically change the key name.\n\nExample:\n{\n  \"{{my-tool-call-step.output.key-name-for-name}}\": \"{{name}}\",\n  \"{{my-tool-call-step.input.key-name-for-age}}\": \"{{age}}\",\n  \"{{workflow.input.key-name-for-date}}\": \"{{date}}\"\n}\n\nYou can represent the value as a string, number, boolean, array, or object.\n\nExample:\n{\n  \"name\": \"john\",\n  \"age\": 20,\n  \"date\": \"2021-01-01\",\n  \"metadata\": {\n    \"unique-key\": \"{{my-tool-call-step.output.unique-key}}\"\n  },\n  \"array\": [\"A\", \"B\", \"C\"],\n}"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "CreateWorkflowBlockDTO": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "These are the pre-configured messages that will be spoken to the user while the block is running.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockStartMessage",
                  "title": "BlockStartMessage"
                },
                {
                  "$ref": "#/components/schemas/BlockCompleteMessage",
                  "title": "BlockCompleteMessage"
                }
              ]
            }
          },
          "inputSchema": {
            "description": "This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`\n\nThese are accessible as variables:\n- ({{input.propertyName}}) in context of the block execution (step)\n- ({{stepName.input.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "outputSchema": {
            "description": "This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).\n\nThese are accessible as variables:\n- ({{output.propertyName}}) in context of the block execution (step)\n- ({{stepName.output.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "type": {
            "type": "string",
            "description": "This creates a workflow which can contain any number of steps (block executions).",
            "enum": [
              "workflow"
            ]
          },
          "steps": {
            "type": "array",
            "description": "These are the steps in the workflow.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HandoffStep",
                  "title": "HandoffStep"
                },
                {
                  "$ref": "#/components/schemas/CallbackStep",
                  "title": "CallbackStep"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the block. This is just for your reference."
          }
        },
        "required": [
          "type"
        ]
      },
      "UpdateBlockDTO": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "description": "These are the pre-configured messages that will be spoken to the user while the block is running.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/BlockStartMessage",
                  "title": "BlockStartMessage"
                },
                {
                  "$ref": "#/components/schemas/BlockCompleteMessage",
                  "title": "BlockCompleteMessage"
                }
              ]
            }
          },
          "inputSchema": {
            "description": "This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`\n\nThese are accessible as variables:\n- ({{input.propertyName}}) in context of the block execution (step)\n- ({{stepName.input.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "outputSchema": {
            "description": "This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).\n\nThese are accessible as variables:\n- ({{output.propertyName}}) in context of the block execution (step)\n- ({{stepName.output.propertyName}}) in context of the workflow",
            "allOf": [
              {
                "$ref": "#/components/schemas/JsonSchema"
              }
            ]
          },
          "tool": {
            "description": "This is the tool that the block will call. To use an existing tool, use `toolId`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateDtmfToolDTO",
                "title": "DtmfTool"
              },
              {
                "$ref": "#/components/schemas/CreateEndCallToolDTO",
                "title": "EndCallTool"
              },
              {
                "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                "title": "VoicemailTool"
              },
              {
                "$ref": "#/components/schemas/CreateFunctionToolDTO",
                "title": "FunctionTool"
              },
              {
                "$ref": "#/components/schemas/CreateGhlToolDTO",
                "title": "GhlTool"
              },
              {
                "$ref": "#/components/schemas/CreateMakeToolDTO",
                "title": "MakeTool"
              },
              {
                "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                "title": "TransferCallTool"
              }
            ]
          },
          "steps": {
            "type": "array",
            "description": "These are the steps in the workflow.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/HandoffStep",
                  "title": "HandoffStep"
                },
                {
                  "$ref": "#/components/schemas/CallbackStep",
                  "title": "CallbackStep"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the block. This is just for your reference."
          },
          "instruction": {
            "type": "string",
            "description": "This is the instruction to the model.\n\nYou can reference any variable in the context of the current block execution (step):\n- \"{{input.your-property-name}}\" for the current step's input\n- \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow)\n- \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow)\n- \"{{workflow.input.your-property-name}}\" for the current workflow's input\n- \"{{global.your-property-name}}\" for the global context\n\nThis can be as simple or as complex as you want it to be.\n- \"say hello and ask the user about their day!\"\n- \"collect the user's first and last name\"\n- \"user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}\"",
            "minLength": 1
          },
          "toolId": {
            "type": "string",
            "description": "This is the id of the tool that the block will call. To use a transient tool, use `tool`."
          }
        }
      },
      "DtmfTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "dtmf"
            ],
            "description": "The type of tool. \"dtmf\" for DTMF tool."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this tool belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "EndCallTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "endCall"
            ],
            "description": "The type of tool. \"endCall\" for End Call tool."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this tool belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "FunctionTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this tool belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "GhlTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ghl"
            ],
            "description": "The type of tool. \"ghl\" for GHL tool."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this tool belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/GhlToolMetadata"
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "metadata"
        ]
      },
      "MakeTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "make"
            ],
            "description": "The type of tool. \"make\" for Make tool."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this tool belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/MakeToolMetadata"
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "metadata"
        ]
      },
      "TransferCallTool": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "transferCall"
            ]
          },
          "destinations": {
            "type": "array",
            "description": "These are the destinations that the call can be transferred to. If no destinations are provided, server.url will be used to get the transfer destination once the tool is called.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/TransferDestinationAssistant",
                  "title": "Assistant"
                },
                {
                  "$ref": "#/components/schemas/TransferDestinationStep",
                  "title": "Step"
                },
                {
                  "$ref": "#/components/schemas/TransferDestinationNumber",
                  "title": "Number"
                },
                {
                  "$ref": "#/components/schemas/TransferDestinationSip",
                  "title": "Sip"
                }
              ]
            }
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the organization that this tool belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the tool was last updated."
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateToolDTO": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        }
      },
      "CreateFileDTO": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "This is the File you want to upload for use with the Knowledge Base.",
            "format": "binary"
          }
        },
        "required": [
          "file"
        ]
      },
      "File": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string",
            "enum": [
              "file"
            ]
          },
          "status": {
            "enum": [
              "indexed",
              "not_indexed"
            ],
            "type": "string"
          },
          "name": {
            "type": "string",
            "description": "This is the name of the file. This is just for your own reference.",
            "maxLength": 40
          },
          "originalName": {
            "type": "string"
          },
          "bytes": {
            "type": "number"
          },
          "purpose": {
            "type": "string"
          },
          "mimetype": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "bucket": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "metadata": {
            "type": "object"
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the file."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this file belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the file was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the file was last updated."
          }
        },
        "required": [
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateFileDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the file. This is just for your own reference.",
            "maxLength": 100
          }
        }
      },
      "Metrics": {
        "type": "object",
        "properties": {
          "orgId": {
            "type": "string"
          },
          "rangeStart": {
            "type": "string"
          },
          "rangeEnd": {
            "type": "string"
          },
          "bill": {
            "type": "number"
          },
          "billWithinBillingLimit": {
            "type": "boolean"
          },
          "billDailyBreakdown": {
            "type": "object"
          },
          "callActive": {
            "type": "number"
          },
          "callActiveWithinConcurrencyLimit": {
            "type": "boolean"
          },
          "callMinutes": {
            "type": "number"
          },
          "callMinutesDailyBreakdown": {
            "type": "object"
          },
          "callMinutesAverage": {
            "type": "number"
          },
          "callMinutesAverageDailyBreakdown": {
            "type": "object"
          },
          "callCount": {
            "type": "number"
          },
          "callCountDailyBreakdown": {
            "type": "object"
          }
        },
        "required": [
          "orgId",
          "rangeStart",
          "rangeEnd",
          "bill",
          "billWithinBillingLimit",
          "billDailyBreakdown",
          "callActive",
          "callActiveWithinConcurrencyLimit",
          "callMinutes",
          "callMinutesDailyBreakdown",
          "callMinutesAverage",
          "callMinutesAverageDailyBreakdown",
          "callCount",
          "callCountDailyBreakdown"
        ]
      },
      "TimeRange": {
        "type": "object",
        "properties": {
          "step": {
            "type": "string",
            "description": "This is the time step for aggregations.\n\nIf not provided, defaults to returning for the entire time range.",
            "enum": [
              "minute",
              "hour",
              "day",
              "week",
              "month",
              "quarter",
              "year",
              "decade",
              "century",
              "millennium"
            ]
          },
          "start": {
            "format": "date-time",
            "type": "string",
            "description": "This is the start date for the time range.\n\nIf not provided, defaults to the 7 days ago."
          },
          "end": {
            "format": "date-time",
            "type": "string",
            "description": "This is the end date for the time range.\n\nIf not provided, defaults to now."
          },
          "timezone": {
            "type": "string",
            "description": "This is the timezone you want to set for the query.\n\nIf not provided, defaults to UTC."
          }
        }
      },
      "AnalyticsOperation": {
        "type": "object",
        "properties": {
          "operation": {
            "type": "string",
            "description": "This is the aggregation operation you want to perform.",
            "enum": [
              "sum",
              "avg",
              "count",
              "min",
              "max"
            ]
          },
          "column": {
            "type": "string",
            "description": "This is the columns you want to perform the aggregation operation on.",
            "enum": [
              "id",
              "cost",
              "costBreakdown.llm",
              "costBreakdown.stt",
              "costBreakdown.tts",
              "costBreakdown.vapi",
              "costBreakdown.ttsCharacters",
              "costBreakdown.llmPromptTokens",
              "costBreakdown.llmCompletionTokens",
              "duration"
            ]
          },
          "alias": {
            "type": "string",
            "description": "This is the alias for column name returned. Defaults to `${operation}${column}`."
          }
        },
        "required": [
          "operation",
          "column"
        ]
      },
      "AnalyticsQuery": {
        "type": "object",
        "properties": {
          "table": {
            "type": "string",
            "description": "This is the table you want to query.",
            "enum": [
              "call"
            ]
          },
          "groupBy": {
            "type": "string",
            "description": "This is the list of columns you want to group by.",
            "enum": [
              "type",
              "assistantId",
              "endedReason",
              "analysis.successEvaluation",
              "status"
            ],
            "items": {
              "type": "string",
              "enum": [
                "type",
                "assistantId",
                "endedReason",
                "analysis.successEvaluation",
                "status"
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the query. This will be used to identify the query in the response."
          },
          "timeRange": {
            "description": "This is the time range for the query.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeRange"
              }
            ]
          },
          "operations": {
            "description": "This is the list of operations you want to perform.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticsOperation"
            }
          }
        },
        "required": [
          "table",
          "name",
          "operations"
        ]
      },
      "AnalyticsQueryDTO": {
        "type": "object",
        "properties": {
          "queries": {
            "description": "This is the list of metric queries you want to perform.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnalyticsQuery"
            }
          }
        },
        "required": [
          "queries"
        ]
      },
      "AnalyticsQueryResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the unique key for the query."
          },
          "timeRange": {
            "description": "This is the time range for the query.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeRange"
              }
            ]
          },
          "result": {
            "description": "This is the result of the query, a list of unique groups with result of their aggregations.\n\nExample:\n\"result\": [\n  { \"date\": \"2023-01-01\", \"assistantId\": \"123\", \"endedReason\": \"customer-ended-call\", \"sumDuration\": 120, \"avgCost\": 10.5 },\n  { \"date\": \"2023-01-02\", \"assistantId\": \"123\", \"endedReason\": \"customer-did-not-give-microphone-permission\", \"sumDuration\": 0, \"avgCost\": 0 },\n  // Additional results\n]",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "name",
          "timeRange",
          "result"
        ]
      },
      "CallLogPrivileged": {
        "type": "object",
        "properties": {
          "callId": {
            "type": "string",
            "description": "This is the unique identifier for the call."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this call log belongs to."
          },
          "log": {
            "type": "string",
            "description": "This is the log message associated with the call."
          },
          "level": {
            "type": "string",
            "description": "This is the level of the log message.",
            "enum": [
              "INFO",
              "LOG",
              "WARN",
              "ERROR",
              "CHECKPOINT"
            ]
          },
          "time": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the log was created."
          }
        },
        "required": [
          "callId",
          "orgId",
          "log",
          "level",
          "time"
        ]
      },
      "CallLogsPaginatedResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallLogPrivileged"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "required": [
          "results",
          "metadata"
        ]
      },
      "AnyscaleCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anyscale"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "AnthropicCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anthropic"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "AzureOpenAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "azure-openai"
            ]
          },
          "region": {
            "type": "string",
            "enum": [
              "australia",
              "canada",
              "eastus2",
              "eastus",
              "france",
              "india",
              "japan",
              "northcentralus",
              "norway",
              "southcentralus",
              "sweden",
              "switzerland",
              "uk",
              "westus",
              "westus3"
            ]
          },
          "models": {
            "type": "string",
            "enum": [
              "gpt-4o-2024-05-13-global"
            ],
            "example": [
              "gpt-4-0125-preview",
              "gpt-4-0613"
            ],
            "items": {
              "type": "string",
              "enum": [
                "gpt-4o-2024-05-13-global"
              ]
            }
          },
          "openAIKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "openAIEndpoint": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "region",
          "models",
          "openAIKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "openAIEndpoint"
        ]
      },
      "SipTrunkGateway": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "description": "This is the IPv4 address of the gateway."
          },
          "port": {
            "type": "number",
            "description": "This is the port number of the gateway. Default is 5060.\n\n@default 5060",
            "minimum": 1,
            "maximum": 65535
          },
          "netmask": {
            "type": "number",
            "description": "This is the netmask of the gateway. Defaults to 32.\n\n@default 32",
            "minimum": 24,
            "maximum": 32
          },
          "inboundEnabled": {
            "type": "boolean",
            "description": "This is whether inbound calls are allowed from this gateway. Default is true.\n\n@default true"
          },
          "outboundEnabled": {
            "type": "boolean",
            "description": "This is whether outbound calls should be sent to this gateway. Default is true.\n\nNote, if netmask is less than 32, it doesn't affect the outbound IPs that are tried. 1 attempt is made to `ip:port`.\n\n@default true"
          },
          "outboundProtocol": {
            "type": "string",
            "description": "This is the protocol to use for SIP signaling outbound calls. Default is udp.\n\n@default udp",
            "enum": [
              "tls/srtp",
              "tcp",
              "tls",
              "udp"
            ]
          },
          "optionsPingEnabled": {
            "type": "boolean",
            "description": "This is whether to send options ping to the gateway. This can be used to check if the gateway is reachable. Default is false.\n\nThis is useful for high availability setups where you want to check if the gateway is reachable before routing calls to it. Note, if no gateway for a trunk is reachable, outbound calls will be rejected.\n\n@default false"
          }
        },
        "required": [
          "ip"
        ]
      },
      "SipTrunkOutboundSipRegisterPlan": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "realm": {
            "type": "string"
          }
        }
      },
      "SipTrunkOutboundAuthenticationPlan": {
        "type": "object",
        "properties": {
          "authPassword": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "authUsername": {
            "type": "string"
          },
          "sipRegisterPlan": {
            "description": "This can be used to configure if SIP register is required by the SIP trunk. If not provided, no SIP registration will be attempted.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SipTrunkOutboundSipRegisterPlan"
              }
            ]
          }
        }
      },
      "SbcConfiguration": {
        "type": "object",
        "properties": {}
      },
      "ByoSipTrunkCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This can be used to bring your own SIP trunks or to connect to a Carrier.",
            "enum": [
              "byo-sip-trunk"
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "gateways": {
            "description": "This is the list of SIP trunk's gateways.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SipTrunkGateway"
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the SIP trunk. This is just for your reference.",
            "minLength": 1,
            "maxLength": 40
          },
          "outboundAuthenticationPlan": {
            "description": "This can be used to configure the outbound authentication if required by the SIP trunk.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SipTrunkOutboundAuthenticationPlan"
              }
            ]
          },
          "outboundLeadingPlusEnabled": {
            "type": "boolean",
            "description": "This ensures the outbound origination attempts have a leading plus. Defaults to false to match conventional telecom behavior."
          },
          "sbcConfiguration": {
            "description": "This is an advanced configuration for enterprise deployments. This uses the onprem SBC to trunk into the SIP trunk's `gateways`, rather than the managed SBC provided by Vapi.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SbcConfiguration"
              }
            ]
          }
        },
        "required": [
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "gateways"
        ]
      },
      "CartesiaCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "cartesia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "CustomLLMCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "custom-llm"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "DeepgramCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepgram"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "GladiaCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gladia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "DeepInfraCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepinfra"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "ElevenLabsCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "11labs"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "GoHighLevelCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gohighlevel"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "GroqCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "groq"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "LmntCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "lmnt"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "MakeCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "make"
            ]
          },
          "teamId": {
            "type": "string",
            "description": "Team ID"
          },
          "region": {
            "type": "string",
            "description": "Region of your application. For example: eu1, eu2, us1, us2"
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "teamId",
          "region",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "OpenRouterCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openrouter"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "PerplexityAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "perplexity-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "PlayHTCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "playht"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "userId"
        ]
      },
      "RimeAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "rime-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "RunpodCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "runpod"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "S3Credential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "Credential provider. Only allowed value is s3"
          },
          "awsAccessKeyId": {
            "type": "string",
            "description": "AWS access key ID."
          },
          "awsSecretAccessKey": {
            "type": "string",
            "description": "AWS access key secret. This is not returned in the API."
          },
          "region": {
            "type": "string",
            "description": "AWS region in which the S3 bucket is located."
          },
          "s3BucketName": {
            "type": "string",
            "description": "AWS S3 bucket name."
          },
          "s3PathPrefix": {
            "type": "string",
            "description": "The path prefix for the uploaded recording. Ex. \"recordings/\""
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "awsAccessKeyId",
          "awsSecretAccessKey",
          "region",
          "s3BucketName",
          "s3PathPrefix",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "TogetherAICredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "together-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          }
        },
        "required": [
          "provider",
          "apiKey",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "TwilioCredential": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "twilio"
            ]
          },
          "authToken": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "accountSid": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "authToken",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "accountSid"
        ]
      },
      "VonageCredential": {
        "type": "object",
        "properties": {
          "vonageApplicationPrivateKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "provider": {
            "type": "string",
            "enum": [
              "vonage"
            ]
          },
          "apiSecret": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the credential."
          },
          "orgId": {
            "type": "string",
            "description": "This is the unique identifier for the org that this credential belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the credential was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the assistant was last updated."
          },
          "vonageApplicationId": {
            "type": "string",
            "description": "This is the Vonage Application ID for the credential.\n\nOnly relevant for Vonage credentials."
          },
          "apiKey": {
            "type": "string"
          }
        },
        "required": [
          "vonageApplicationPrivateKey",
          "provider",
          "apiSecret",
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "vonageApplicationId",
          "apiKey"
        ]
      },
      "CreateAnyscaleCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anyscale"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateAnthropicCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anthropic"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateAzureOpenAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "azure-openai"
            ]
          },
          "region": {
            "type": "string",
            "enum": [
              "australia",
              "canada",
              "eastus2",
              "eastus",
              "france",
              "india",
              "japan",
              "northcentralus",
              "norway",
              "southcentralus",
              "sweden",
              "switzerland",
              "uk",
              "westus",
              "westus3"
            ]
          },
          "models": {
            "type": "string",
            "enum": [
              "gpt-4o-2024-05-13-global"
            ],
            "example": [
              "gpt-4-0125-preview",
              "gpt-4-0613"
            ],
            "items": {
              "type": "string",
              "enum": [
                "gpt-4o-2024-05-13-global"
              ]
            }
          },
          "openAIKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "openAIEndpoint": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "region",
          "models",
          "openAIKey",
          "openAIEndpoint"
        ]
      },
      "CreateByoSipTrunkCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This can be used to bring your own SIP trunks or to connect to a Carrier.",
            "enum": [
              "byo-sip-trunk"
            ]
          },
          "gateways": {
            "description": "This is the list of SIP trunk's gateways.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SipTrunkGateway"
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the SIP trunk. This is just for your reference.",
            "minLength": 1,
            "maxLength": 40
          },
          "outboundAuthenticationPlan": {
            "description": "This can be used to configure the outbound authentication if required by the SIP trunk.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SipTrunkOutboundAuthenticationPlan"
              }
            ]
          },
          "outboundLeadingPlusEnabled": {
            "type": "boolean",
            "description": "This ensures the outbound origination attempts have a leading plus. Defaults to false to match conventional telecom behavior."
          },
          "sbcConfiguration": {
            "description": "This is an advanced configuration for enterprise deployments. This uses the onprem SBC to trunk into the SIP trunk's `gateways`, rather than the managed SBC provided by Vapi.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SbcConfiguration"
              }
            ]
          }
        },
        "required": [
          "gateways"
        ]
      },
      "CreateCartesiaCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "cartesia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateCustomLLMCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "custom-llm"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateDeepgramCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepgram"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateGladiaCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gladia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateDeepInfraCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepinfra"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateElevenLabsCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "11labs"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateGoHighLevelCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gohighlevel"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateGroqCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "groq"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateLmntCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "lmnt"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateMakeCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "make"
            ]
          },
          "teamId": {
            "type": "string",
            "description": "Team ID"
          },
          "region": {
            "type": "string",
            "description": "Region of your application. For example: eu1, eu2, us1, us2"
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "teamId",
          "region",
          "apiKey"
        ]
      },
      "CreateOpenAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateOpenRouterCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openrouter"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreatePerplexityAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "perplexity-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreatePlayHTCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "playht"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiKey",
          "userId"
        ]
      },
      "CreateRimeAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "rime-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateRunpodCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "runpod"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateS3CredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "Credential provider. Only allowed value is s3"
          },
          "awsAccessKeyId": {
            "type": "string",
            "description": "AWS access key ID."
          },
          "awsSecretAccessKey": {
            "type": "string",
            "description": "AWS access key secret. This is not returned in the API."
          },
          "region": {
            "type": "string",
            "description": "AWS region in which the S3 bucket is located."
          },
          "s3BucketName": {
            "type": "string",
            "description": "AWS S3 bucket name."
          },
          "s3PathPrefix": {
            "type": "string",
            "description": "The path prefix for the uploaded recording. Ex. \"recordings/\""
          }
        },
        "required": [
          "provider",
          "awsAccessKeyId",
          "awsSecretAccessKey",
          "region",
          "s3BucketName",
          "s3PathPrefix"
        ]
      },
      "CreateTogetherAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "together-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "CreateTwilioCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "twilio"
            ]
          },
          "authToken": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "accountSid": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "authToken",
          "accountSid"
        ]
      },
      "CreateVonageCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "vonage"
            ]
          },
          "apiSecret": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "apiKey": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiSecret",
          "apiKey"
        ]
      },
      "UpdateAnyscaleCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anyscale"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateAnthropicCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "anthropic"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateAzureOpenAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "azure-openai"
            ]
          },
          "region": {
            "type": "string",
            "enum": [
              "australia",
              "canada",
              "eastus2",
              "eastus",
              "france",
              "india",
              "japan",
              "northcentralus",
              "norway",
              "southcentralus",
              "sweden",
              "switzerland",
              "uk",
              "westus",
              "westus3"
            ]
          },
          "models": {
            "type": "string",
            "enum": [
              "gpt-4o-2024-05-13-global"
            ],
            "example": [
              "gpt-4-0125-preview",
              "gpt-4-0613"
            ],
            "items": {
              "type": "string",
              "enum": [
                "gpt-4o-2024-05-13-global"
              ]
            }
          },
          "openAIKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "openAIEndpoint": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "region",
          "models",
          "openAIKey",
          "openAIEndpoint"
        ]
      },
      "UpdateByoSipTrunkCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This can be used to bring your own SIP trunks or to connect to a Carrier.",
            "enum": [
              "byo-sip-trunk"
            ]
          },
          "gateways": {
            "description": "This is the list of SIP trunk's gateways.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SipTrunkGateway"
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the SIP trunk. This is just for your reference.",
            "minLength": 1,
            "maxLength": 40
          },
          "outboundAuthenticationPlan": {
            "description": "This can be used to configure the outbound authentication if required by the SIP trunk.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SipTrunkOutboundAuthenticationPlan"
              }
            ]
          },
          "outboundLeadingPlusEnabled": {
            "type": "boolean",
            "description": "This ensures the outbound origination attempts have a leading plus. Defaults to false to match conventional telecom behavior."
          },
          "sbcConfiguration": {
            "description": "This is an advanced configuration for enterprise deployments. This uses the onprem SBC to trunk into the SIP trunk's `gateways`, rather than the managed SBC provided by Vapi.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SbcConfiguration"
              }
            ]
          }
        },
        "required": [
          "gateways"
        ]
      },
      "UpdateCartesiaCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "cartesia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateCustomLLMCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "custom-llm"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateDeepInfraCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepinfra"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateDeepgramCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "deepgram"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateGladiaCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gladia"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateElevenLabsCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "11labs"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateGoHighLevelCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "gohighlevel"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateGroqCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "groq"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateLmntCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "lmnt"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateMakeCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "make"
            ]
          },
          "teamId": {
            "type": "string",
            "description": "Team ID"
          },
          "region": {
            "type": "string",
            "description": "Region of your application. For example: eu1, eu2, us1, us2"
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "teamId",
          "region",
          "apiKey"
        ]
      },
      "UpdateOpenAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateOpenRouterCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "openrouter"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdatePerplexityAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "perplexity-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdatePlayHTCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "playht"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiKey",
          "userId"
        ]
      },
      "UpdateRimeAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "rime-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateRunpodCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "runpod"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateS3CredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "s3"
            ],
            "description": "Credential provider. Only allowed value is s3"
          },
          "awsAccessKeyId": {
            "type": "string",
            "description": "AWS access key ID."
          },
          "awsSecretAccessKey": {
            "type": "string",
            "description": "AWS access key secret. This is not returned in the API."
          },
          "region": {
            "type": "string",
            "description": "AWS region in which the S3 bucket is located."
          },
          "s3BucketName": {
            "type": "string",
            "description": "AWS S3 bucket name."
          },
          "s3PathPrefix": {
            "type": "string",
            "description": "The path prefix for the uploaded recording. Ex. \"recordings/\""
          }
        },
        "required": [
          "provider",
          "awsAccessKeyId",
          "awsSecretAccessKey",
          "region",
          "s3BucketName",
          "s3PathPrefix"
        ]
      },
      "UpdateTogetherAICredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "together-ai"
            ]
          },
          "apiKey": {
            "type": "string",
            "description": "This is not returned in the API."
          }
        },
        "required": [
          "provider",
          "apiKey"
        ]
      },
      "UpdateTwilioCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "twilio"
            ]
          },
          "authToken": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "accountSid": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "authToken",
          "accountSid"
        ]
      },
      "UpdateVonageCredentialDTO": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "vonage"
            ]
          },
          "apiSecret": {
            "type": "string",
            "description": "This is not returned in the API."
          },
          "apiKey": {
            "type": "string"
          }
        },
        "required": [
          "provider",
          "apiSecret",
          "apiKey"
        ]
      },
      "CreateOrgDTO": {
        "type": "object",
        "properties": {
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.\nWhen HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.\nThis is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "This is the name of the org. This is just for your own reference.",
            "maxLength": 40
          },
          "billingLimit": {
            "type": "number",
            "description": "This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.",
            "minimum": 0,
            "maximum": 1000
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret."
          },
          "concurrencyLimit": {
            "type": "number",
            "description": "This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.",
            "minimum": 1,
            "maximum": 10
          }
        }
      },
      "OrgPlan": {
        "type": "object",
        "properties": {
          "includedProviders": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "includedMinutes": {
            "type": "number"
          },
          "costPerOverageMinute": {
            "type": "number"
          }
        }
      },
      "Org": {
        "type": "object",
        "properties": {
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.\nWhen HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.\nThis is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.",
            "example": false
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the org."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the org was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the org was last updated."
          },
          "stripeCustomerId": {
            "type": "string",
            "description": "This is the Stripe customer for the org."
          },
          "stripeSubscriptionId": {
            "type": "string",
            "description": "This is the subscription for the org."
          },
          "stripeSubscriptionItemId": {
            "type": "string",
            "description": "This is the subscription's subscription item."
          },
          "stripeSubscriptionCurrentPeriodStart": {
            "format": "date-time",
            "type": "string",
            "description": "This is the subscription's current period start."
          },
          "stripeSubscriptionStatus": {
            "type": "string",
            "description": "This is the subscription's status."
          },
          "plan": {
            "description": "This is the plan for the org.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OrgPlan"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "This is the name of the org. This is just for your own reference.",
            "maxLength": 40
          },
          "billingLimit": {
            "type": "number",
            "description": "This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.",
            "minimum": 0,
            "maximum": 1000
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret."
          },
          "concurrencyLimit": {
            "type": "number",
            "description": "This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.",
            "minimum": 1,
            "maximum": 10
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateOrgDTO": {
        "type": "object",
        "properties": {
          "hipaaEnabled": {
            "type": "boolean",
            "description": "When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false.\nWhen HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively.\nThis is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "This is the name of the org. This is just for your own reference.",
            "maxLength": 40
          },
          "billingLimit": {
            "type": "number",
            "description": "This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.",
            "minimum": 0,
            "maximum": 1000
          },
          "serverUrl": {
            "type": "string",
            "description": "This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.\n\nAll requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation."
          },
          "serverUrlSecret": {
            "type": "string",
            "description": "This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret."
          },
          "concurrencyLimit": {
            "type": "number",
            "description": "This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.",
            "minimum": 1,
            "maximum": 10
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the profile or user."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the profile was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the profile was last updated."
          },
          "email": {
            "type": "string",
            "description": "This is the email of the user that is associated with the profile."
          },
          "fullName": {
            "type": "string",
            "description": "This is the full name of the user that is associated with the profile."
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "email"
        ]
      },
      "InviteUserDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          }
        },
        "required": [
          "email"
        ]
      },
      "VoiceLibraryVoiceResponse": {
        "type": "object",
        "properties": {
          "voiceId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "publicOwnerId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "age": {
            "type": "object"
          },
          "accent": {
            "type": "string"
          }
        },
        "required": [
          "voiceId",
          "name"
        ]
      },
      "AddVoiceToProviderDTO": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "string",
            "description": "This is the owner_id of your shared voice which you want to add to your provider Account from Provider Voice Library"
          },
          "voiceId": {
            "type": "string",
            "description": "This is the voice_id of the shared voice which you want to add to your provider Account from Provider Voice Library"
          },
          "name": {
            "type": "string",
            "description": "This is the new name of the voice which you want to have once you have added voice to your provider Account from Provider Voice Library"
          }
        },
        "required": [
          "ownerId",
          "voiceId",
          "name"
        ]
      },
      "VoiceLibrary": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "This is the voice provider that will be used.",
            "enum": [
              "11labs",
              "azure",
              "cartesia",
              "deepgram",
              "lmnt",
              "neets",
              "openai",
              "playht",
              "rime-ai"
            ]
          },
          "providerId": {
            "type": "string",
            "description": "The ID of the voice provided by the provider."
          },
          "slug": {
            "type": "string",
            "description": "The unique slug of the voice."
          },
          "name": {
            "type": "string",
            "description": "The name of the voice."
          },
          "language": {
            "type": "string",
            "description": "The language of the voice."
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the voice."
          },
          "model": {
            "type": "string",
            "description": "The model of the voice."
          },
          "supportedModels": {
            "type": "string",
            "description": "The supported models of the voice."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the voice.",
            "enum": [
              "male",
              "female"
            ]
          },
          "accent": {
            "type": "string",
            "description": "The accent of the voice."
          },
          "previewUrl": {
            "type": "string",
            "description": "The preview URL of the voice."
          },
          "description": {
            "type": "string",
            "description": "The description of the voice."
          },
          "credentialId": {
            "type": "string",
            "description": "The credential ID of the voice."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the voice library."
          },
          "orgId": {
            "type": "string",
            "description": "The unique identifier for the organization that this voice library belongs to."
          },
          "isPublic": {
            "type": "boolean",
            "description": "The Public voice is shared accross all the organizations."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "The deletion status of the voice."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the voice library was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the voice library was last updated."
          }
        },
        "required": [
          "id",
          "orgId",
          "isPublic",
          "isDeleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "CloneVoiceDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the cloned voice in the provider account."
          },
          "description": {
            "type": "string",
            "description": "This is the description of your cloned voice."
          },
          "labels": {
            "type": "string",
            "description": "Serialized labels dictionary for the voice."
          },
          "files": {
            "description": "These are the files you want to use to clone your voice. Only Audio files are supported.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "binary"
            }
          }
        },
        "required": [
          "name",
          "files"
        ]
      },
      "ToolTemplateSetup": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "videoUrl": {
            "type": "string"
          },
          "docsUrl": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "MakeToolProviderDetails": {
        "type": "object",
        "properties": {
          "templateUrl": {
            "type": "string",
            "description": "This is the Template URL or the Snapshot URL corresponding to the Template."
          },
          "setupInstructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolTemplateSetup"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "make"
            ],
            "description": "The type of tool. \"make\" for Make tool."
          },
          "scenarioId": {
            "type": "number"
          },
          "scenarioName": {
            "type": "string"
          },
          "triggerHookId": {
            "type": "number"
          },
          "triggerHookName": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "GhlToolProviderDetails": {
        "type": "object",
        "properties": {
          "templateUrl": {
            "type": "string",
            "description": "This is the Template URL or the Snapshot URL corresponding to the Template."
          },
          "setupInstructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolTemplateSetup"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ghl"
            ],
            "description": "The type of tool. \"ghl\" for GHL tool."
          },
          "workflowId": {
            "type": "string"
          },
          "workflowName": {
            "type": "string"
          },
          "webhookHookId": {
            "type": "string"
          },
          "webhookHookName": {
            "type": "string"
          },
          "locationId": {
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "FunctionToolProviderDetails": {
        "type": "object",
        "properties": {
          "templateUrl": {
            "type": "string",
            "description": "This is the Template URL or the Snapshot URL corresponding to the Template."
          },
          "setupInstructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolTemplateSetup"
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of tool. \"function\" for Function tool."
          }
        },
        "required": [
          "type"
        ]
      },
      "ToolTemplateMetadata": {
        "type": "object",
        "properties": {
          "collectionType": {
            "type": "string"
          },
          "collectionId": {
            "type": "string"
          },
          "collectionName": {
            "type": "string"
          }
        }
      },
      "CreateToolTemplateDTO": {
        "type": "object",
        "properties": {
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateDtmfToolDTO",
                "title": "DtmfTool"
              },
              {
                "$ref": "#/components/schemas/CreateEndCallToolDTO",
                "title": "EndCallTool"
              },
              {
                "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                "title": "VoicemailTool"
              },
              {
                "$ref": "#/components/schemas/CreateFunctionToolDTO",
                "title": "FunctionTool"
              },
              {
                "$ref": "#/components/schemas/CreateGhlToolDTO",
                "title": "GhlTool"
              },
              {
                "$ref": "#/components/schemas/CreateMakeToolDTO",
                "title": "MakeTool"
              },
              {
                "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                "title": "TransferCallTool"
              }
            ]
          },
          "providerDetails": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MakeToolProviderDetails",
                "title": "MakeToolProviderDetails"
              },
              {
                "$ref": "#/components/schemas/GhlToolProviderDetails",
                "title": "GhlToolProviderDetails"
              },
              {
                "$ref": "#/components/schemas/FunctionToolProviderDetails",
                "title": "FunctionToolProviderDetails"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/ToolTemplateMetadata"
          },
          "visibility": {
            "type": "string",
            "default": "private",
            "enum": [
              "public",
              "private"
            ]
          },
          "type": {
            "type": "string",
            "default": "tool",
            "enum": [
              "tool"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the template. This is just for your own reference.",
            "maxLength": 40
          },
          "provider": {
            "type": "string",
            "enum": [
              "make",
              "gohighlevel",
              "function"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "Template": {
        "type": "object",
        "properties": {
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateDtmfToolDTO",
                "title": "DtmfTool"
              },
              {
                "$ref": "#/components/schemas/CreateEndCallToolDTO",
                "title": "EndCallTool"
              },
              {
                "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                "title": "VoicemailTool"
              },
              {
                "$ref": "#/components/schemas/CreateFunctionToolDTO",
                "title": "FunctionTool"
              },
              {
                "$ref": "#/components/schemas/CreateGhlToolDTO",
                "title": "GhlTool"
              },
              {
                "$ref": "#/components/schemas/CreateMakeToolDTO",
                "title": "MakeTool"
              },
              {
                "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                "title": "TransferCallTool"
              }
            ]
          },
          "providerDetails": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MakeToolProviderDetails",
                "title": "MakeToolProviderDetails"
              },
              {
                "$ref": "#/components/schemas/GhlToolProviderDetails",
                "title": "GhlToolProviderDetails"
              },
              {
                "$ref": "#/components/schemas/FunctionToolProviderDetails",
                "title": "FunctionToolProviderDetails"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/ToolTemplateMetadata"
          },
          "visibility": {
            "default": "private",
            "enum": [
              "public",
              "private"
            ],
            "type": "string"
          },
          "type": {
            "type": "string",
            "default": "tool",
            "enum": [
              "tool"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the template. This is just for your own reference.",
            "maxLength": 40
          },
          "provider": {
            "enum": [
              "make",
              "gohighlevel",
              "function"
            ],
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the template."
          },
          "orgId": {
            "type": "string",
            "description": "The unique identifier for the organization that this template belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the template was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The ISO 8601 date-time string of when the template was last updated."
          }
        },
        "required": [
          "type",
          "id",
          "orgId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateToolTemplateDTO": {
        "type": "object",
        "properties": {
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CreateDtmfToolDTO",
                "title": "DtmfTool"
              },
              {
                "$ref": "#/components/schemas/CreateEndCallToolDTO",
                "title": "EndCallTool"
              },
              {
                "$ref": "#/components/schemas/CreateVoicemailToolDTO",
                "title": "VoicemailTool"
              },
              {
                "$ref": "#/components/schemas/CreateFunctionToolDTO",
                "title": "FunctionTool"
              },
              {
                "$ref": "#/components/schemas/CreateGhlToolDTO",
                "title": "GhlTool"
              },
              {
                "$ref": "#/components/schemas/CreateMakeToolDTO",
                "title": "MakeTool"
              },
              {
                "$ref": "#/components/schemas/CreateTransferCallToolDTO",
                "title": "TransferCallTool"
              }
            ]
          },
          "providerDetails": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/MakeToolProviderDetails",
                "title": "MakeToolProviderDetails"
              },
              {
                "$ref": "#/components/schemas/GhlToolProviderDetails",
                "title": "GhlToolProviderDetails"
              },
              {
                "$ref": "#/components/schemas/FunctionToolProviderDetails",
                "title": "FunctionToolProviderDetails"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/ToolTemplateMetadata"
          },
          "visibility": {
            "type": "string",
            "default": "private",
            "enum": [
              "public",
              "private"
            ]
          },
          "type": {
            "type": "string",
            "default": "tool",
            "enum": [
              "tool"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the template. This is just for your own reference.",
            "maxLength": 40
          },
          "provider": {
            "type": "string",
            "enum": [
              "make",
              "gohighlevel",
              "function"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "TokenRestrictions": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "This determines whether the token is enabled or disabled. Default is true, it's enabled."
          },
          "allowedOrigins": {
            "description": "This determines the allowed origins for this token. Validates the `Origin` header. Default is any origin.\n\nOnly relevant for `public` tokens.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedAssistantIds": {
            "description": "This determines which assistantIds can be used when creating a call. Default is any assistantId.\n\nOnly relevant for `public` tokens.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowTransientAssistant": {
            "type": "boolean",
            "description": "This determines whether transient assistants can be used when creating a call. Default is true.\n\nIf `allowedAssistantIds` is provided, this is automatically false.\n\nOnly relevant for `public` tokens."
          }
        }
      },
      "CreateTokenDTO": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "This is the tag for the token. It represents its scope.",
            "enum": [
              "private",
              "public"
            ]
          },
          "name": {
            "type": "string",
            "description": "This is the name of the token. This is just for your own reference.",
            "maxLength": 40
          },
          "restrictions": {
            "description": "This are the restrictions for the token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenRestrictions"
              }
            ]
          }
        }
      },
      "Token": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "This is the tag for the token. It represents its scope.",
            "enum": [
              "private",
              "public"
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the token."
          },
          "orgId": {
            "type": "string",
            "description": "This is unique identifier for the org that this token belongs to."
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the token was created."
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "This is the ISO 8601 date-time string of when the token was last updated."
          },
          "value": {
            "type": "string",
            "description": "This is the token key."
          },
          "name": {
            "type": "string",
            "description": "This is the name of the token. This is just for your own reference.",
            "maxLength": 40
          },
          "restrictions": {
            "description": "This are the restrictions for the token.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenRestrictions"
              }
            ]
          }
        },
        "required": [
          "id",
          "orgId",
          "createdAt",
          "updatedAt",
          "value"
        ]
      },
      "SyncVoiceLibraryDTO": {
        "type": "object",
        "properties": {
          "providers": {
            "type": "string",
            "description": "List of providers you want to sync.",
            "enum": [
              "11labs",
              "azure",
              "cartesia",
              "deepgram",
              "lmnt",
              "neets",
              "openai",
              "playht",
              "rime-ai"
            ],
            "items": {
              "type": "string",
              "enum": [
                "11labs",
                "azure",
                "cartesia",
                "deepgram",
                "lmnt",
                "neets",
                "openai",
                "playht",
                "rime-ai"
              ]
            }
          }
        }
      },
      "ToolCallFunction": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "This is the name of the function the model called."
          },
          "arguments": {
            "type": "object",
            "description": "These are the arguments that the function was called with."
          }
        },
        "required": [
          "name",
          "arguments"
        ]
      },
      "ToolCall": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of tool the model called.",
            "enum": [
              "function"
            ]
          },
          "function": {
            "description": "This is the function the model called.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ToolCallFunction"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "This is the unique identifier for the tool call."
          }
        },
        "required": [
          "type",
          "function",
          "id"
        ]
      },
      "FunctionToolWithToolCall": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "function"
            ],
            "description": "The type of tool. \"function\" for Function tool."
          },
          "toolCall": {
            "$ref": "#/components/schemas/ToolCall"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "toolCall"
        ]
      },
      "GhlToolWithToolCall": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "ghl"
            ],
            "description": "The type of tool. \"ghl\" for GHL tool."
          },
          "toolCall": {
            "$ref": "#/components/schemas/ToolCall"
          },
          "metadata": {
            "$ref": "#/components/schemas/GhlToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "toolCall",
          "metadata"
        ]
      },
      "MakeToolWithToolCall": {
        "type": "object",
        "properties": {
          "async": {
            "type": "boolean",
            "description": "This determines if the tool is async.\n\nIf async, the assistant will move forward without waiting for your server to respond. This is useful if you just want to trigger something on your server.\n\nIf sync, the assistant will wait for your server to respond. This is useful if want assistant to respond with the result from your server.\n\nDefaults to synchronous (`false`).",
            "example": false
          },
          "messages": {
            "type": "array",
            "description": "These are the messages that will be spoken to the user as the tool is running.\n\nFor some tools, this is auto-filled based on special fields like `tool.destinations`. For others like the function tool, these can be custom configured.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageStart",
                  "title": "ToolMessageStart"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageDelayed",
                  "title": "ToolMessageDelayed"
                }
              ]
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "make"
            ],
            "description": "The type of tool. \"make\" for Make tool."
          },
          "toolCall": {
            "$ref": "#/components/schemas/ToolCall"
          },
          "metadata": {
            "$ref": "#/components/schemas/MakeToolMetadata"
          },
          "function": {
            "description": "This is the function definition of the tool.\n\nFor `endCall`, `transferCall`, and `dtmf` tools, this is auto-filled based on tool-specific fields like `tool.destinations`. But, even in those cases, you can provide a custom function definition for advanced use cases.\n\nAn example of an advanced use case is if you want to customize the message that's spoken for `endCall` tool. You can specify a function where it returns an argument \"reason\". Then, in `messages` array, you can have many \"request-complete\" messages. One of these messages will be triggered if the `messages[].conditions` matches the \"reason\" argument.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIFunction"
              }
            ]
          },
          "server": {
            "description": "This is the server that will be hit when this tool is requested by the model.\n\nAll requests will be sent with the call object among other things. You can find more details in the Server URL documentation.\n\nThis overrides the serverUrl set on the org and the phoneNumber. Order of precedence: highest tool.server.url, then assistant.serverUrl, then phoneNumber.serverUrl, then org.serverUrl.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Server"
              }
            ]
          }
        },
        "required": [
          "type",
          "toolCall",
          "metadata"
        ]
      },
      "UserMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the user in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the user."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "endTime": {
            "type": "number",
            "description": "The timestamp when the message ended."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          },
          "duration": {
            "type": "number",
            "description": "The duration of the message in seconds."
          }
        },
        "required": [
          "role",
          "message",
          "time",
          "endTime",
          "secondsFromStart"
        ]
      },
      "SystemMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the system in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the system."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "message",
          "time",
          "secondsFromStart"
        ]
      },
      "BotMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the bot in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content from the bot."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "endTime": {
            "type": "number",
            "description": "The timestamp when the message ended."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          },
          "source": {
            "type": "string",
            "description": "The source of the message."
          }
        },
        "required": [
          "role",
          "message",
          "time",
          "endTime",
          "secondsFromStart"
        ]
      },
      "FunctionCallMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the function call in the conversation."
          },
          "message": {
            "type": "string",
            "description": "The message content for the function call."
          },
          "name": {
            "type": "string",
            "description": "The name of the function being called."
          },
          "args": {
            "type": "string",
            "description": "The arguments for the function call in JSON format."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "message",
          "name",
          "args",
          "time",
          "secondsFromStart"
        ]
      },
      "ToolCallMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the tool call in the conversation."
          },
          "toolCalls": {
            "description": "The list of tool calls made during the conversation.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "message": {
            "type": "string",
            "description": "The message content for the tool call."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "toolCalls",
          "message",
          "time",
          "secondsFromStart"
        ]
      },
      "ToolCallResultMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the tool call result in the conversation."
          },
          "toolCallId": {
            "type": "string",
            "description": "The ID of the tool call."
          },
          "name": {
            "type": "string",
            "description": "The name of the tool that returned the result."
          },
          "result": {
            "type": "string",
            "description": "The result of the tool call in JSON format."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "toolCallId",
          "name",
          "result",
          "time",
          "secondsFromStart"
        ]
      },
      "FunctionResultMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "The role of the function result in the conversation."
          },
          "name": {
            "type": "string",
            "description": "The name of the function that returned the result."
          },
          "result": {
            "type": "string",
            "description": "The result of the function call in JSON format."
          },
          "time": {
            "type": "number",
            "description": "The timestamp when the message was sent."
          },
          "secondsFromStart": {
            "type": "number",
            "description": "The number of seconds from the start of the conversation."
          }
        },
        "required": [
          "role",
          "name",
          "result",
          "time",
          "secondsFromStart"
        ]
      },
      "ClientMessageConversationUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"conversation-update\" is sent when an update is committed to the conversation history.",
            "enum": [
              "conversation-update"
            ]
          },
          "messagesOpenAIFormatted": {
            "description": "This is the most up-to-date conversation history at the time the message is sent.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          }
        },
        "required": [
          "type",
          "messagesOpenAIFormatted"
        ]
      },
      "ClientMessageFunctionCall": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"function-call\" is sent to call a function.",
            "deprecated": true,
            "enum": [
              "function-call"
            ]
          },
          "functionCall": {
            "type": "object",
            "description": "This is the function call content.",
            "deprecated": true
          }
        },
        "required": [
          "type",
          "functionCall"
        ]
      },
      "ClientMessageFunctionCallResult": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"function-call-result\" is sent to forward the result of a function call to the client.",
            "deprecated": true,
            "enum": [
              "function-call-result"
            ]
          },
          "functionCallResult": {
            "type": "object",
            "description": "This is the result of the function call."
          }
        },
        "required": [
          "type",
          "functionCallResult"
        ]
      },
      "ClientMessageHang": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"hang\" is sent when the assistant is hanging due to a delay. The delay can be caused by many factors, such as:\n- the model is too slow to respond\n- the voice is too slow to respond\n- the tool call is still waiting for a response from your server\n- etc.",
            "enum": [
              "hang"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ClientMessageMetadata": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"metadata\" is sent to forward metadata to the client.",
            "enum": [
              "metadata"
            ]
          },
          "metadata": {
            "type": "string",
            "description": "This is the metadata content"
          }
        },
        "required": [
          "type",
          "metadata"
        ]
      },
      "ClientMessageModelOutput": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"model-output\" is sent as the model outputs tokens.",
            "enum": [
              "model-output"
            ]
          },
          "output": {
            "type": "object",
            "description": "This is the output of the model. It can be a token or tool call."
          }
        },
        "required": [
          "type",
          "output"
        ]
      },
      "ClientMessageSpeechUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"speech-update\" is sent whenever assistant or user start or stop speaking.",
            "enum": [
              "speech-update"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the speech update.",
            "enum": [
              "started",
              "stopped"
            ]
          },
          "role": {
            "type": "string",
            "description": "This is the role which the speech update is for.",
            "enum": [
              "assistant",
              "user"
            ]
          }
        },
        "required": [
          "type",
          "status",
          "role"
        ]
      },
      "ClientMessageTranscript": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"transcript\" is sent as transcriber outputs partial or final transcript.",
            "enum": [
              "transcript"
            ]
          },
          "role": {
            "type": "string",
            "description": "This is the role for which the transcript is for.",
            "enum": [
              "assistant",
              "user"
            ]
          },
          "transcriptType": {
            "type": "string",
            "description": "This is the type of the transcript.",
            "enum": [
              "partial",
              "final"
            ]
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript content."
          }
        },
        "required": [
          "type",
          "role",
          "transcriptType",
          "transcript"
        ]
      },
      "ClientMessageToolCalls": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"tool-calls\" is sent to call a tool.",
            "enum": [
              "tool-calls"
            ]
          },
          "toolWithToolCallList": {
            "type": "array",
            "description": "This is the list of tools calls that the model is requesting along with the original tool configuration.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FunctionToolWithToolCall",
                  "title": "FunctionToolWithToolCall"
                },
                {
                  "$ref": "#/components/schemas/GhlToolWithToolCall",
                  "title": "GhlToolWithToolCall"
                },
                {
                  "$ref": "#/components/schemas/MakeToolWithToolCall",
                  "title": "MakeToolWithToolCall"
                }
              ]
            }
          },
          "toolCallList": {
            "description": "This is the list of tool calls that the model is requesting.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            }
          }
        },
        "required": [
          "toolWithToolCallList",
          "toolCallList"
        ]
      },
      "ClientMessageToolCallsResult": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"tool-calls-result\" is sent to forward the result of a tool call to the client.",
            "enum": [
              "tool-calls-result"
            ]
          },
          "toolCallResult": {
            "type": "object",
            "description": "This is the result of the tool call."
          }
        },
        "required": [
          "type",
          "toolCallResult"
        ]
      },
      "ClientMessageUserInterrupted": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"user-interrupted\" is sent when the user interrupts the assistant.",
            "enum": [
              "user-interrupted"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ClientMessageVoiceInput": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"voice-input\" is sent when a generation is requested from voice provider.",
            "enum": [
              "voice-input"
            ]
          },
          "input": {
            "type": "string",
            "description": "This is the voice input content"
          }
        },
        "required": [
          "type",
          "input"
        ]
      },
      "ClientMessage": {
        "type": "object",
        "properties": {
          "message": {
            "description": "These are all the messages that can be sent to the client-side SDKs during the call. Configure the messages you'd like to receive in `assistant.clientMessages`.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ClientMessageConversationUpdate",
                "title": "ConversationUpdate"
              },
              {
                "$ref": "#/components/schemas/ClientMessageHang",
                "title": "Hang"
              },
              {
                "$ref": "#/components/schemas/ClientMessageMetadata",
                "title": "Metadata"
              },
              {
                "$ref": "#/components/schemas/ClientMessageModelOutput",
                "title": "ModelOutput"
              },
              {
                "$ref": "#/components/schemas/ClientMessageSpeechUpdate",
                "title": "SpeechUpdate"
              },
              {
                "$ref": "#/components/schemas/ClientMessageTranscript",
                "title": "Transcript"
              },
              {
                "$ref": "#/components/schemas/ClientMessageToolCalls",
                "title": "ToolCalls"
              },
              {
                "$ref": "#/components/schemas/ClientMessageToolCallsResult",
                "title": "ToolCallsResult"
              },
              {
                "$ref": "#/components/schemas/ClientMessageUserInterrupted",
                "title": "UserInterrupted"
              },
              {
                "$ref": "#/components/schemas/ClientMessageVoiceInput",
                "title": "VoiceInput"
              }
            ]
          }
        },
        "required": [
          "message"
        ]
      },
      "ServerMessageAssistantRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"assistant-request\" is sent to fetch assistant configuration for an incoming call.",
            "enum": [
              "assistant-request"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "ServerMessageConversationUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"conversation-update\" is sent when an update is committed to the conversation history.",
            "enum": [
              "conversation-update"
            ]
          },
          "messagesOpenAIFormatted": {
            "description": "This is the most up-to-date conversation history at the time the message is sent.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "messagesOpenAIFormatted",
          "customer",
          "call"
        ]
      },
      "ServerMessageEndOfCallReport": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"end-of-call-report\" is sent when the call ends and post-processing is complete.",
            "enum": [
              "end-of-call-report"
            ]
          },
          "endedReason": {
            "type": "string",
            "description": "This is the reason the call ended.",
            "enum": [
              "assistant-error",
              "assistant-not-found",
              "db-error",
              "no-server-available",
              "pipeline-error-openai-llm-failed",
              "pipeline-error-azure-openai-llm-failed",
              "pipeline-error-groq-llm-failed",
              "pipeline-error-openai-voice-failed",
              "pipeline-error-cartesia-voice-failed",
              "pipeline-error-deepgram-transcriber-failed",
              "pipeline-error-deepgram-voice-failed",
              "pipeline-error-gladia-transcriber-failed",
              "pipeline-error-eleven-labs-voice-failed",
              "pipeline-error-playht-voice-failed",
              "pipeline-error-lmnt-voice-failed",
              "pipeline-error-azure-voice-failed",
              "pipeline-error-rime-ai-voice-failed",
              "pipeline-error-neets-voice-failed",
              "pipeline-no-available-model",
              "worker-shutdown",
              "twilio-failed-to-connect-call",
              "unknown-error",
              "vonage-disconnected",
              "vonage-failed-to-connect-call",
              "phone-call-provider-bypass-enabled-but-no-call-received",
              "vapi-error-phone-call-worker-setup-socket-error",
              "vapi-error-phone-call-worker-worker-setup-socket-timeout",
              "vapi-error-phone-call-worker-could-not-find-call",
              "vapi-error-phone-call-worker-call-never-connected",
              "vapi-error-web-call-worker-setup-failed",
              "assistant-not-invalid",
              "assistant-not-provided",
              "call-start-error-neither-assistant-nor-server-set",
              "assistant-request-failed",
              "assistant-request-returned-error",
              "assistant-request-returned-unspeakable-error",
              "assistant-request-returned-invalid-assistant",
              "assistant-request-returned-no-assistant",
              "assistant-request-returned-forwarding-phone-number",
              "assistant-ended-call",
              "assistant-said-end-call-phrase",
              "assistant-forwarded-call",
              "assistant-join-timed-out",
              "customer-busy",
              "customer-ended-call",
              "customer-did-not-answer",
              "customer-did-not-give-microphone-permission",
              "assistant-said-message-with-end-call-enabled",
              "exceeded-max-duration",
              "manually-canceled",
              "phone-call-provider-closed-websocket",
              "pipeline-error-anthropic-llm-failed",
              "pipeline-error-together-ai-llm-failed",
              "pipeline-error-anyscale-llm-failed",
              "pipeline-error-openrouter-llm-failed",
              "pipeline-error-perplexity-ai-llm-failed",
              "pipeline-error-deepinfra-llm-failed",
              "pipeline-error-runpod-llm-failed",
              "pipeline-error-custom-llm-llm-failed",
              "pipeline-error-eleven-labs-voice-not-found",
              "pipeline-error-eleven-labs-quota-exceeded",
              "pipeline-error-eleven-labs-unauthorized-access",
              "pipeline-error-eleven-labs-unauthorized-to-access-model",
              "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus",
              "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade",
              "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade",
              "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade",
              "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
              "pipeline-error-eleven-labs-voice-not-fine-tuned",
              "pipeline-error-eleven-labs-invalid-api-key",
              "pipeline-error-eleven-labs-invalid-voice-samples",
              "pipeline-error-eleven-labs-voice-disabled-by-owner",
              "pipeline-error-eleven-labs-blocked-account-in-probation",
              "pipeline-error-eleven-labs-blocked-content-against-their-policy",
              "pipeline-error-playht-request-timed-out",
              "pipeline-error-playht-invalid-voice",
              "pipeline-error-playht-unexpected-error",
              "pipeline-error-playht-out-of-credits",
              "pipeline-error-playht-rate-limit-exceeded",
              "pipeline-error-playht-502-gateway-error",
              "pipeline-error-playht-504-gateway-error",
              "pipeline-error-gladia-transcriber-failed",
              "sip-gateway-failed-to-connect-call",
              "silence-timed-out",
              "voicemail",
              "vonage-rejected"
            ]
          },
          "messages": {
            "type": "array",
            "description": "These are the message history of the call. The format is not OpenAI format but a custom VAPI format.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionCallMessage",
                  "title": "FunctionCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionResultMessage",
                  "title": "FunctionResultMessage"
                }
              ]
            }
          },
          "recordingUrl": {
            "type": "string",
            "description": "This is the URL of the call recording."
          },
          "stereoRecordingUrl": {
            "type": "string",
            "description": "This is the URL of the stereo call recording."
          },
          "recordingWav": {
            "type": "object",
            "description": "This is the WAV buffer of the call recording."
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "description": "These are the artifacts from the call.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Artifact"
              }
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript of the call."
          },
          "summary": {
            "type": "string",
            "description": "This is the summary of the call."
          },
          "analysis": {
            "description": "This is the analysis of the call.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Analysis"
              }
            ]
          }
        },
        "required": [
          "type",
          "endedReason",
          "customer",
          "call",
          "transcript",
          "summary",
          "analysis"
        ]
      },
      "ServerMessageHang": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"hang\" is sent when the assistant is hanging due to a delay. The delay can be caused by many factors, such as:\n- the model is too slow to respond\n- the voice is too slow to respond\n- the tool call is still waiting for a response from your server\n- etc.",
            "enum": [
              "hang"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "ServerMessageModelOutput": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"model-output\" is sent as the model outputs tokens.",
            "enum": [
              "model-output"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "output": {
            "type": "object",
            "description": "This is the output of the model. It can be a token or tool call."
          }
        },
        "required": [
          "type",
          "customer",
          "call",
          "output"
        ]
      },
      "ServerMessagePhoneCallControl": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"phone-call-control\" is an advanced type of message.\n\nWhen it is requested in `assistant.serverMessages`, the hangup and forwarding responsibilities are delegated to your server. Vapi will no longer do the actual transfer and hangup.",
            "enum": [
              "phone-call-control"
            ]
          },
          "request": {
            "type": "string",
            "description": "This is the request to control the phone call.",
            "enum": [
              "forward",
              "hang-up"
            ]
          },
          "destination": {
            "description": "This is the destination to forward the call to if the request is \"forward\".",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "request",
          "customer",
          "call"
        ]
      },
      "ServerMessageSpeechUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"speech-update\" is sent whenever assistant or user start or stop speaking.",
            "enum": [
              "speech-update"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the speech update.",
            "enum": [
              "started",
              "stopped"
            ]
          },
          "role": {
            "type": "string",
            "description": "This is the role which the speech update is for.",
            "enum": [
              "assistant",
              "user"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "status",
          "role",
          "customer",
          "call"
        ]
      },
      "ServerMessageStatusUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"status-update\" is sent whenever the `call.status` changes.",
            "enum": [
              "status-update"
            ]
          },
          "status": {
            "type": "string",
            "description": "This is the status of the call.",
            "enum": [
              "queued",
              "ringing",
              "in-progress",
              "forwarding",
              "ended"
            ]
          },
          "endedReason": {
            "type": "string",
            "description": "This is the reason the call ended. This is only sent if the status is \"ended\".",
            "enum": [
              "assistant-error",
              "assistant-not-found",
              "db-error",
              "no-server-available",
              "pipeline-error-openai-llm-failed",
              "pipeline-error-azure-openai-llm-failed",
              "pipeline-error-groq-llm-failed",
              "pipeline-error-openai-voice-failed",
              "pipeline-error-cartesia-voice-failed",
              "pipeline-error-deepgram-transcriber-failed",
              "pipeline-error-deepgram-voice-failed",
              "pipeline-error-gladia-transcriber-failed",
              "pipeline-error-eleven-labs-voice-failed",
              "pipeline-error-playht-voice-failed",
              "pipeline-error-lmnt-voice-failed",
              "pipeline-error-azure-voice-failed",
              "pipeline-error-rime-ai-voice-failed",
              "pipeline-error-neets-voice-failed",
              "pipeline-no-available-model",
              "worker-shutdown",
              "twilio-failed-to-connect-call",
              "unknown-error",
              "vonage-disconnected",
              "vonage-failed-to-connect-call",
              "phone-call-provider-bypass-enabled-but-no-call-received",
              "vapi-error-phone-call-worker-setup-socket-error",
              "vapi-error-phone-call-worker-worker-setup-socket-timeout",
              "vapi-error-phone-call-worker-could-not-find-call",
              "vapi-error-phone-call-worker-call-never-connected",
              "vapi-error-web-call-worker-setup-failed",
              "assistant-not-invalid",
              "assistant-not-provided",
              "call-start-error-neither-assistant-nor-server-set",
              "assistant-request-failed",
              "assistant-request-returned-error",
              "assistant-request-returned-unspeakable-error",
              "assistant-request-returned-invalid-assistant",
              "assistant-request-returned-no-assistant",
              "assistant-request-returned-forwarding-phone-number",
              "assistant-ended-call",
              "assistant-said-end-call-phrase",
              "assistant-forwarded-call",
              "assistant-join-timed-out",
              "customer-busy",
              "customer-ended-call",
              "customer-did-not-answer",
              "customer-did-not-give-microphone-permission",
              "assistant-said-message-with-end-call-enabled",
              "exceeded-max-duration",
              "manually-canceled",
              "phone-call-provider-closed-websocket",
              "pipeline-error-anthropic-llm-failed",
              "pipeline-error-together-ai-llm-failed",
              "pipeline-error-anyscale-llm-failed",
              "pipeline-error-openrouter-llm-failed",
              "pipeline-error-perplexity-ai-llm-failed",
              "pipeline-error-deepinfra-llm-failed",
              "pipeline-error-runpod-llm-failed",
              "pipeline-error-custom-llm-llm-failed",
              "pipeline-error-eleven-labs-voice-not-found",
              "pipeline-error-eleven-labs-quota-exceeded",
              "pipeline-error-eleven-labs-unauthorized-access",
              "pipeline-error-eleven-labs-unauthorized-to-access-model",
              "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus",
              "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade",
              "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade",
              "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade",
              "pipeline-error-eleven-labs-system-busy-and-requested-upgrade",
              "pipeline-error-eleven-labs-voice-not-fine-tuned",
              "pipeline-error-eleven-labs-invalid-api-key",
              "pipeline-error-eleven-labs-invalid-voice-samples",
              "pipeline-error-eleven-labs-voice-disabled-by-owner",
              "pipeline-error-eleven-labs-blocked-account-in-probation",
              "pipeline-error-eleven-labs-blocked-content-against-their-policy",
              "pipeline-error-playht-request-timed-out",
              "pipeline-error-playht-invalid-voice",
              "pipeline-error-playht-unexpected-error",
              "pipeline-error-playht-out-of-credits",
              "pipeline-error-playht-rate-limit-exceeded",
              "pipeline-error-playht-502-gateway-error",
              "pipeline-error-playht-504-gateway-error",
              "pipeline-error-gladia-transcriber-failed",
              "sip-gateway-failed-to-connect-call",
              "silence-timed-out",
              "voicemail",
              "vonage-rejected"
            ]
          },
          "messages": {
            "type": "array",
            "description": "These are the conversation messages of the call. This is only sent if the status is \"forwarding\".",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserMessage",
                  "title": "UserMessage"
                },
                {
                  "$ref": "#/components/schemas/SystemMessage",
                  "title": "SystemMessage"
                },
                {
                  "$ref": "#/components/schemas/BotMessage",
                  "title": "BotMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionCallMessage",
                  "title": "FunctionCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallMessage",
                  "title": "ToolCallMessage"
                },
                {
                  "$ref": "#/components/schemas/ToolCallResultMessage",
                  "title": "ToolCallResultMessage"
                },
                {
                  "$ref": "#/components/schemas/FunctionResultMessage",
                  "title": "FunctionResultMessage"
                }
              ]
            }
          },
          "messagesOpenAIFormatted": {
            "description": "These are the conversation messages of the call. This is only sent if the status is \"forwarding\".",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIMessage"
            }
          },
          "destination": {
            "description": "This is the destination the call is being transferred to. This is only sent if the status is \"forwarding\".",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript of the call. This is only sent if the status is \"forwarding\"."
          },
          "inboundPhoneCallDebuggingArtifacts": {
            "type": "object",
            "description": "This is the inbound phone call debugging artifacts. This is only sent if the status is \"ended\" and there was an error accepting the inbound phone call.\n\nThis will include any errors related to the \"assistant-request\" if one was made."
          }
        },
        "required": [
          "type",
          "status",
          "customer",
          "call"
        ]
      },
      "ServerMessageToolCalls": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"tool-calls\" is sent to call a tool.",
            "enum": [
              "tool-calls"
            ]
          },
          "toolWithToolCallList": {
            "type": "array",
            "description": "This is the list of tools calls that the model is requesting along with the original tool configuration.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/FunctionToolWithToolCall",
                  "title": "FunctionToolWithToolCall"
                },
                {
                  "$ref": "#/components/schemas/GhlToolWithToolCall",
                  "title": "GhlToolWithToolCall"
                },
                {
                  "$ref": "#/components/schemas/MakeToolWithToolCall",
                  "title": "MakeToolWithToolCall"
                }
              ]
            }
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "toolCallList": {
            "description": "This is the list of tool calls that the model is requesting.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            }
          }
        },
        "required": [
          "toolWithToolCallList",
          "customer",
          "call",
          "toolCallList"
        ]
      },
      "ServerMessageTransferDestinationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"transfer-destination-request\" is sent when the model is requesting transfer but destination is unknown.",
            "enum": [
              "transfer-destination-request"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "ServerMessageTransferUpdate": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"transfer-update\" is sent whenever a transfer happens.",
            "enum": [
              "transfer-update"
            ]
          },
          "destination": {
            "description": "This is the destination of the transfer.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationAssistant",
                "title": "Assistant"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationStep",
                "title": "Step"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "Number"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "Sip"
              }
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "toAssistant": {
            "description": "This is the assistant that the call is being transferred to. This is only sent if `destination.type` is \"assistant\".",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "fromAssistant": {
            "description": "This is the assistant that the call is being transferred from. This is only sent if `destination.type` is \"assistant\".",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "ServerMessageTranscript": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"transcript\" is sent as transcriber outputs partial or final transcript.",
            "enum": [
              "transcript"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "role": {
            "type": "string",
            "description": "This is the role for which the transcript is for.",
            "enum": [
              "assistant",
              "user"
            ]
          },
          "transcriptType": {
            "type": "string",
            "description": "This is the type of the transcript.",
            "enum": [
              "partial",
              "final"
            ]
          },
          "transcript": {
            "type": "string",
            "description": "This is the transcript content."
          }
        },
        "required": [
          "type",
          "customer",
          "call",
          "role",
          "transcriptType",
          "transcript"
        ]
      },
      "ServerMessageUserInterrupted": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"user-interrupted\" is sent when the user interrupts the assistant.",
            "enum": [
              "user-interrupted"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          }
        },
        "required": [
          "type",
          "customer",
          "call"
        ]
      },
      "ServerMessageVoiceInput": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. \"voice-input\" is sent when a generation is requested from voice provider.",
            "enum": [
              "voice-input"
            ]
          },
          "phoneNumber": {
            "type": "object",
            "description": "The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`."
          },
          "customer": {
            "type": "object",
            "description": "The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`."
          },
          "call": {
            "type": "object",
            "description": "This is the main `call` object of the call."
          },
          "artifact": {
            "type": "object",
            "description": "These are the live artifacts of the call."
          },
          "timestamp": {
            "type": "string",
            "description": "This is the timestamp of the message."
          },
          "input": {
            "type": "string",
            "description": "This is the voice input content"
          }
        },
        "required": [
          "type",
          "customer",
          "call",
          "input"
        ]
      },
      "ServerMessage": {
        "type": "object",
        "properties": {
          "message": {
            "description": "These are all the messages that can be sent to your server before, after and during the call. Configure the messages you'd like to receive in `assistant.serverMessages`.\n\nThe server where the message is sent is determined by the following precedence order:\n\n1. `tool.server.url` (if configured, and only for \"tool-calls\" message)\n2. `assistant.serverUrl` (if configure)\n3. `phoneNumber.serverUrl` (if configured)\n4. `org.serverUrl` (if configured)",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ServerMessageAssistantRequest",
                "title": "AssistantRequest"
              },
              {
                "$ref": "#/components/schemas/ServerMessageConversationUpdate",
                "title": "ConversationUpdate"
              },
              {
                "$ref": "#/components/schemas/ServerMessageEndOfCallReport",
                "title": "EndOfCallReport"
              },
              {
                "$ref": "#/components/schemas/ServerMessageHang",
                "title": "Hang"
              },
              {
                "$ref": "#/components/schemas/ServerMessageModelOutput",
                "title": "ModelOutput"
              },
              {
                "$ref": "#/components/schemas/ServerMessagePhoneCallControl",
                "title": "PhoneCallControl"
              },
              {
                "$ref": "#/components/schemas/ServerMessageSpeechUpdate",
                "title": "SpeechUpdate"
              },
              {
                "$ref": "#/components/schemas/ServerMessageStatusUpdate",
                "title": "StatusUpdate"
              },
              {
                "$ref": "#/components/schemas/ServerMessageToolCalls",
                "title": "ToolCalls"
              },
              {
                "$ref": "#/components/schemas/ServerMessageTransferDestinationRequest",
                "title": "TransferDestinationRequest"
              },
              {
                "$ref": "#/components/schemas/ServerMessageTransferUpdate",
                "title": "TransferUpdate"
              },
              {
                "$ref": "#/components/schemas/ServerMessageTranscript",
                "title": "Transcript"
              },
              {
                "$ref": "#/components/schemas/ServerMessageUserInterrupted",
                "title": "UserInterrupted"
              },
              {
                "$ref": "#/components/schemas/ServerMessageVoiceInput",
                "title": "VoiceInput"
              }
            ]
          }
        },
        "required": [
          "message"
        ]
      },
      "ServerMessageResponseAssistantRequest": {
        "type": "object",
        "properties": {
          "destination": {
            "description": "This is the destination to transfer the inbound call to. This will immediately transfer without using any assistants.\n\nIf this is sent, `assistantId`, `assistant`, `squadId`, and `squad` are ignored.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "NumberTransferDestination"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "SipTransferDestination"
              }
            ]
          },
          "assistantId": {
            "type": "string",
            "nullable": true,
            "description": "This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead."
          },
          "assistant": {
            "description": "This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.\n\nIf you're unsure why you're getting an invalid assistant, try logging your response and send the JSON blob to POST /assistant which will return the validation errors.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateAssistantDTO"
              }
            ]
          },
          "assistantOverrides": {
            "description": "These are the overrides for the `assistant` or `assistantId`'s settings and template variables.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AssistantOverrides"
              }
            ]
          },
          "squadId": {
            "type": "string",
            "description": "This is the squad that will be used for the call. To use a transient squad, use `squad` instead."
          },
          "squad": {
            "description": "This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateSquadDTO"
              }
            ]
          },
          "error": {
            "type": "string",
            "description": "This is the error if the call shouldn't be accepted. This is spoken to the customer.\n\nIf this is sent, `assistantId`, `assistant`, `squadId`, `squad`, and `destination` are ignored."
          }
        }
      },
      "ToolCallResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "array",
            "description": "This is the message that will be spoken to the user.\n\nIf this is not returned, assistant will speak:\n1. a `request-complete` or `request-failed` message from `tool.messages`, if it exists\n2. a response generated by the model, if not",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ToolMessageComplete",
                  "title": "ToolMessageComplete"
                },
                {
                  "$ref": "#/components/schemas/ToolMessageFailed",
                  "title": "ToolMessageFailed"
                }
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "This is the name of the function the model called."
          },
          "toolCallId": {
            "type": "string",
            "description": "This is the unique identifier for the tool call."
          },
          "result": {
            "type": "string",
            "description": "This is the result if the tool call was successful. This is added to the conversation history.\n\nFurther, if this is returned, assistant will speak:\n1. the `message`, if it exists and is of type `request-complete`\n2. a `request-complete` message from `tool.messages`, if it exists\n3. a response generated by the model, if neither exist"
          },
          "error": {
            "type": "string",
            "description": "This is the error if the tool call was not successful. This is added to the conversation history.\n\nFurther, if this is returned, assistant will speak:\n1. the `message`, if it exists and is of type `request-failed`\n2. a `request-failed` message from `tool.messages`, if it exists\n3. a response generated by the model, if neither exist"
          }
        },
        "required": [
          "name",
          "toolCallId"
        ]
      },
      "ServerMessageResponseToolCalls": {
        "type": "object",
        "properties": {
          "results": {
            "description": "These are the results of the \"tool-calls\" message.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCallResult"
            }
          },
          "error": {
            "type": "string",
            "description": "This is the error message if the tool call was not successful."
          }
        }
      },
      "ServerMessageResponseTransferDestinationRequest": {
        "type": "object",
        "properties": {
          "destination": {
            "description": "This is the destination you'd like the call to be transferred to.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/TransferDestinationAssistant",
                "title": "Assistant"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationStep",
                "title": "Step"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationNumber",
                "title": "Number"
              },
              {
                "$ref": "#/components/schemas/TransferDestinationSip",
                "title": "Sip"
              }
            ]
          },
          "error": {
            "type": "string",
            "description": "This is the error message if the transfer should not be made."
          }
        }
      },
      "ServerMessageResponse": {
        "type": "object",
        "properties": {
          "messageResponse": {
            "description": "This is the response that is expected from the server to the message.\n\nNote: Most messages don't expect a response. Only \"assistant-request\", \"tool-calls\" and \"transfer-destination-request\" do.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ServerMessageResponseAssistantRequest",
                "title": "AssistantRequest"
              },
              {
                "$ref": "#/components/schemas/ServerMessageResponseToolCalls",
                "title": "ToolCalls"
              },
              {
                "$ref": "#/components/schemas/ServerMessageResponseTransferDestinationRequest",
                "title": "TransferDestinationRequest"
              }
            ]
          }
        },
        "required": [
          "messageResponse"
        ]
      },
      "ClientInboundMessageAddMessage": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. Send \"add-message\" message to add a message to the conversation history.",
            "enum": [
              "add-message"
            ]
          },
          "message": {
            "description": "This is the message to add to the conversation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/OpenAIMessage"
              }
            ]
          }
        },
        "required": [
          "type",
          "message"
        ]
      },
      "ClientInboundMessageControl": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. Send \"control\" message to control the assistant. `control` options are:\n- \"mute-assistant\" - mute the assistant\n- \"unmute-assistant\" - unmute the assistant\n- \"say-first-message\" - say the first message (this is used when video recording is enabled and the conversation is only started once the client side kicks off the recording)",
            "enum": [
              "control"
            ]
          },
          "control": {
            "type": "string",
            "description": "This is the control action",
            "enum": [
              "mute-assistant",
              "unmute-assistant",
              "say-first-message"
            ]
          }
        },
        "required": [
          "type",
          "control"
        ]
      },
      "ClientInboundMessageSay": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "This is the type of the message. Send \"say\" message to make the assistant say something.",
            "enum": [
              "say"
            ]
          },
          "content": {
            "type": "string",
            "description": "This is the content to say."
          },
          "endCallAfterSpoken": {
            "type": "boolean",
            "description": "This is the flag to end call after content is spoken."
          }
        }
      },
      "ClientInboundMessage": {
        "type": "object",
        "properties": {
          "message": {
            "description": "These are the messages that can be sent from client-side SDKs to control the call.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/ClientInboundMessageAddMessage",
                "title": "AddMessage"
              },
              {
                "$ref": "#/components/schemas/ClientInboundMessageControl",
                "title": "Control"
              },
              {
                "$ref": "#/components/schemas/ClientInboundMessageSay",
                "title": "Say"
              }
            ]
          }
        },
        "required": [
          "message"
        ]
      }
    }
  }
}